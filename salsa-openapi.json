{
  "openapi": "3.0.1",
  "info": {
    "contact": {
      "name": "Salsa",
      "url": "https://salsa.dev"
    },
    "description": "REST API for interacting with Salsa's payroll services.",
    "title": "REST API",
    "version": "1"
  },
  "servers": [
    {
      "description": "Sandbox",
      "url": "https://api.sandbox.salsa.dev"
    },
    {
      "description": "Production",
      "url": "https://api.salsa.dev"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/api/rest/v1/auth/token": {
      "post": {
        "description": "User API tokens provide short-lived, limited-scope authentication for one-time operations. \n            They are typically associated with a few realms and used to generate temporary authentication tokens for specific API tasks.",
        "operationId": "createUserToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateEmployerUserTokenInput"
                  },
                  {
                    "$ref": "#/components/schemas/CreateWorkerUserTokenInput"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeApiToken"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeApiToken"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Create User API token",
        "tags": ["Authentication"]
      }
    },
    "/api/rest/v1/documents/{documentId}": {
      "get": {
        "description": "Retrieves the Document for the specified document Id.",
        "operationId": "findDocument",
        "parameters": [
          {
            "description": "Document Id",
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeDocument"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve Document",
        "tags": ["Documents"]
      }
    },
    "/api/rest/v1/documents/{documentId}/link": {
      "post": {
        "description": "Creates a signed URL that is accessible until the expiresAt time.",
        "operationId": "createDocumentLink",
        "parameters": [
          {
            "description": "Document Id",
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeDocumentLink"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Generate document link",
        "tags": ["Documents"]
      }
    },
    "/api/rest/v1/employers": {
      "post": {
        "description": "Creates a new Employer.",
        "operationId": "createEmployer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmployerInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeEmployer"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeEmployer"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Create Employer",
        "tags": ["Employers"]
      }
    },
    "/api/rest/v1/employers/": {
      "get": {
        "description": "Retrieves all Employers.",
        "operationId": "getEmployers",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeListEmployer"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve Employers",
        "tags": ["Employers"]
      }
    },
    "/api/rest/v1/employers/{employerId}": {
      "delete": {
        "description": "Deletes an Employer.",
        "operationId": "deleteEmployer",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeEmployer"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Delete Employer",
        "tags": ["Employers"]
      },
      "get": {
        "description": "Retrieves the Employer.",
        "operationId": "getEmployer",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeEmployer"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve Employer",
        "tags": ["Employers"]
      },
      "put": {
        "description": "Updates an Employer.",
        "operationId": "updateEmployer",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmployerInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeEmployer"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Update Employer",
        "tags": ["Employers"]
      }
    },
    "/api/rest/v1/employers/{employerId}/capabilities": {
      "get": {
        "description": "Retrieves all the employer capabilities.",
        "operationId": "getCapabilities",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeEmployerCapabilities"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve employer capabilities.",
        "tags": ["Employer Capabilities"]
      }
    },
    "/api/rest/v1/employers/{employerId}/mock-onboard": {
      "post": {
        "description": "Onboards an Employer using mocked information.",
        "operationId": "mockOnboard_1",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeMockOnboardingEmployer"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Mock-onboard Employer",
        "tags": ["Mock Onboarding"]
      }
    },
    "/api/rest/v1/employers/{employerId}/onboardings": {
      "post": {
        "description": "Creates a hosted workflow that allows Employers to set themselves up within your organization.",
        "operationId": "createHostedEmployerOnboarding",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeHostedEmployerOnboarding"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeHostedEmployerOnboarding"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Create HostedEmployerOnboarding",
        "tags": ["Employer Onboarding"]
      }
    },
    "/api/rest/v1/employers/{employerId}/onboardings/{onboardingId}": {
      "get": {
        "description": "Retrieves a hosted workflow that allows Employers to set themselves up within your organization.",
        "operationId": "getHostedEmployerOnboarding",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Hosted Employer Onboarding Id",
            "in": "path",
            "name": "onboardingId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeHostedEmployerOnboarding"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve HostedEmployerOnboarding",
        "tags": ["Employer Onboarding"]
      }
    },
    "/api/rest/v1/employers/{employerId}/payroll-runs": {
      "get": {
        "description": "Retrieves all PayrollRuns within a given Employer.",
        "operationId": "getPayrollRuns",
        "parameters": [
          {
            "description": "Employer Id to retrieve the list of PayrollRuns for.",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Zero-based page index (0..N)",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "description": "The size of the page to be returned",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 500,
              "minimum": 1
            }
          },
          {
            "description": "Sorting criteria. Prefix the property with - for descending order. Otherwise sort order is ascending. Multiple sort criteria are supported. If no sorting criteria is specified, sorting is not guaranteed however data may be sorted by a default criteria.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeListPayrollRun"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve all PayrollRuns",
        "tags": ["PayrollRuns"]
      },
      "post": {
        "description": "Creates a new PayrollRun. The PayrollRun will have a status of PENDING and contain the included worker payments for each worker.",
        "operationId": "calculatePayrollRun",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PayrollRunCalculateFromPayGroupInput"
                  },
                  {
                    "$ref": "#/components/schemas/PayrollRunCalculateFromWorkerListInput"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopePayrollRun"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopePayrollRun"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Create PayrollRun",
        "tags": ["PayrollRuns"]
      }
    },
    "/api/rest/v1/employers/{employerId}/payroll-runs/preview": {
      "post": {
        "description": "Previews a new PayrollRun. This provides a lightweight preview of what a payroll run may look like after creation.",
        "operationId": "previewPayrollRun",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PayrollRunPreviewFromPayGroupInput"
                  },
                  {
                    "$ref": "#/components/schemas/PayrollRunPreviewFromWorkerListInput"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopePayrollRunPreview"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Preview PayrollRun",
        "tags": ["PayrollRuns"]
      }
    },
    "/api/rest/v1/employers/{employerId}/payroll-runs/{payrollRunId}": {
      "delete": {
        "description": "Deletes a pending PayrollRun by Id. If the PayrollRun is confirmed this operation will return an error.",
        "operationId": "deletePendingPayrollRun",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pending PayrollRun Id to delete",
            "in": "path",
            "name": "payrollRunId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopePayrollRun"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Delete PayrollRun",
        "tags": ["PayrollRuns"]
      },
      "get": {
        "description": "Retrieves a PayrollRun with the specified Id.",
        "operationId": "getPayrollRun",
        "parameters": [
          {
            "description": "Employer Id to retrieve the PayrollRun for",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "PayrollRun Id to retrieve",
            "in": "path",
            "name": "payrollRunId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopePayrollRun"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve PayrollRun",
        "tags": ["PayrollRuns"]
      }
    },
    "/api/rest/v1/employers/{employerId}/payroll-runs/{payrollRunId}/confirm": {
      "post": {
        "description": "Confirms a pending payroll run.",
        "operationId": "confirmPayrollRun",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "PayrollRun Id to confirm",
            "in": "path",
            "name": "payrollRunId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopePayrollRun"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Confirm PayrollRun",
        "tags": ["PayrollRuns"]
      }
    },
    "/api/rest/v1/employers/{employerId}/payroll-runs/{payrollRunId}/reports/cash-requirements": {
      "get": {
        "operationId": "cashRequirements",
        "parameters": [
          {
            "in": "header",
            "name": "Accept",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "PayrollRun Id to retrieve",
            "in": "path",
            "name": "payrollRunId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Cash Requirements report",
        "tags": ["PayrollRunReports"]
      }
    },
    "/api/rest/v1/employers/{employerId}/payroll-runs/{payrollRunId}/reports/payroll-journal": {
      "get": {
        "operationId": "payrollJournal",
        "parameters": [
          {
            "in": "header",
            "name": "Accept",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "PayrollRun Id to retrieve",
            "in": "path",
            "name": "payrollRunId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Payroll Journal report",
        "tags": ["PayrollRunReports"]
      }
    },
    "/api/rest/v1/employers/{employerId}/payroll-runs/{payrollRunId}/state": {
      "get": {
        "description": "Retrieves a PayrollRun state with the specified Id.",
        "operationId": "getPayrollRunState",
        "parameters": [
          {
            "description": "Employer Id to retrieve the PayrollRun for",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "PayrollRun Id to retrieve",
            "in": "path",
            "name": "payrollRunId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopePayrollRunState"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve PayrollRun state",
        "tags": ["PayrollRuns"]
      }
    },
    "/api/rest/v1/employers/{employerId}/payroll-runs/{payrollRunId}/worker-payment-records": {
      "get": {
        "description": "Retrieves all WorkerPaymentRecords linked to the specified PayrollRun.",
        "operationId": "getAllPayrollRunPaymentRecords",
        "parameters": [
          {
            "description": "Employer Id.",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "PayrollRun Id to retrieve the WorkerPaymentRecords for.",
            "in": "path",
            "name": "payrollRunId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter the WorkerPaymentRecords by workerId.",
            "in": "query",
            "name": "workerId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeListWorkerPaymentRecord"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve all WorkerPaymentRecords",
        "tags": ["PayrollRuns"]
      }
    },
    "/api/rest/v1/employers/{employerId}/payroll-runs/{payrollRunId}/worker-payments": {
      "patch": {
        "description": "This operation accepts a list of commands, enabling modifications to any number of WorkerPayments linked to the specified payrollRun with a single invocation.",
        "operationId": "patchWorkerPayrollRun",
        "parameters": [
          {
            "description": "Employer Id.",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "PayrollRun Id of the WorkerPayment to update.",
            "in": "path",
            "name": "payrollRunId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PatchWorkerPaymentInput"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeListWorkerPayment"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Modify a WorkerPayment",
        "tags": ["PayrollRuns"]
      }
    },
    "/api/rest/v1/employers/{employerId}/terms-of-service": {
      "post": {
        "description": "Submits the Employer preference status for the acceptance of the Terms of Service",
        "operationId": "acceptTermsOfService",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TermsOfServiceAcceptanceRestInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeEmployer"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Accept or reject Employer Terms of Service",
        "tags": ["Employers"]
      }
    },
    "/api/rest/v1/employers/{employerId}/work-locations": {
      "get": {
        "description": "Retrieves all the work locations created for the employer.",
        "operationId": "getWorkLocations_1",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeListEmployerWorkLocation"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve work locations.",
        "tags": ["Employer Work Location"]
      }
    },
    "/api/rest/v1/employers/{employerId}/work-locations/{workLocationId}": {
      "get": {
        "description": "Retrieves a work location by its id.",
        "operationId": "getWorkLocation_1",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Work Location Id",
            "in": "path",
            "name": "workLocationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeEmployerWorkLocation"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve a work location.",
        "tags": ["Employer Work Location"]
      }
    },
    "/api/rest/v1/employers/{employerId}/worker-pay-groups": {
      "get": {
        "description": "Retrieves all WorkerPayGroups within a given Employer.",
        "operationId": "getWorkerPayGroups",
        "parameters": [
          {
            "description": "Employer Id to retrieve the WorkerPayGroups for",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeListWorkerPayGroup"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve all WorkerPayGroups",
        "tags": ["WorkerPayGroups"]
      }
    },
    "/api/rest/v1/employers/{employerId}/worker-pay-groups/{workerPayGroupId}": {
      "get": {
        "description": "Retrieves a WorkerPayGroup with the specified Id.",
        "operationId": "getWorkerPayGroup",
        "parameters": [
          {
            "description": "Employer Id to retrieve the WorkerPayGroups for",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "WorkerPayGroup Id to retrieve",
            "in": "path",
            "name": "workerPayGroupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWorkerPayGroup"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve WorkerPayGroup",
        "tags": ["WorkerPayGroups"]
      }
    },
    "/api/rest/v1/employers/{employerId}/worker-payments/{workerPaymentId}": {
      "delete": {
        "description": "Deletes a WorkerPayment.",
        "operationId": "deleteWorkerPayment",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The WorkerPayment Id.",
            "in": "path",
            "name": "workerPaymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Delete WorkerPayment",
        "tags": ["WorkerPayments"]
      },
      "get": {
        "operationId": "getWorkerPayment",
        "parameters": [
          {
            "description": "Employer Id.",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The WorkerPayment Id.",
            "in": "path",
            "name": "workerPaymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWorkerPayment"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve WorkerPayment",
        "tags": ["WorkerPayments"]
      }
    },
    "/api/rest/v1/employers/{employerId}/worker-payments/{workerPaymentId}/advance-payment": {
      "post": {
        "description": "Marks the current pending net pay as already paid.",
        "operationId": "advancePayment",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The WorkerPayment Id.",
            "in": "path",
            "name": "workerPaymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWorkerPayment"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Advance Payment",
        "tags": ["WorkerPayments"]
      }
    },
    "/api/rest/v1/employers/{employerId}/worker-payments/{workerPaymentId}/compensations": {
      "get": {
        "description": "List all compensations of a WorkerPayment.",
        "operationId": "getCompensations",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The WorkerPayment Id.",
            "in": "path",
            "name": "workerPaymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeListWorkerPaymentCompensation"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Get compensations",
        "tags": ["WorkerPayments"]
      },
      "put": {
        "description": "Creates a new compensation for a WorkerPayment.",
        "operationId": "createOrUpdateWorkerPaymentCompensations",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The WorkerPayment Id.",
            "in": "path",
            "name": "workerPaymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateWorkerPaymentCompensationInput"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeListWorkerPaymentCompensation"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Creates compensation",
        "tags": ["WorkerPayments"]
      }
    },
    "/api/rest/v1/employers/{employerId}/worker-payments/{workerPaymentId}/confirm": {
      "post": {
        "description": "Confirms a WorkerPayment. Changes the status to CONFIRMED and it won't be modifiable anymore",
        "operationId": "confirmWorkerPayment",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The WorkerPayment Id.",
            "in": "path",
            "name": "workerPaymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWorkerPayment"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Confirm WorkerPayment",
        "tags": ["WorkerPayments"]
      }
    },
    "/api/rest/v1/employers/{employerId}/worker-payments/{workerPaymentId}/deductions": {
      "get": {
        "description": "List all deductions of a WorkerPayment.",
        "operationId": "getDeductions",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The WorkerPayment Id.",
            "in": "path",
            "name": "workerPaymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeListWorkerPaymentDeduction"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Get deductions",
        "tags": ["WorkerPayments"]
      },
      "put": {
        "description": "Creates a new deduction for a WorkerPayment.",
        "operationId": "createOrUpdateWorkerPaymentDeductions",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The WorkerPayment Id.",
            "in": "path",
            "name": "workerPaymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateWorkerPaymentDeductionInput"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeListWorkerPaymentDeduction"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Creates deduction",
        "tags": ["WorkerPayments"]
      }
    },
    "/api/rest/v1/employers/{employerId}/worker-payments/{workerPaymentId}/worker-payment-record": {
      "get": {
        "description": "Gets the WorkerPaymentRecord.",
        "operationId": "getWorkerPaymentRecord",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The WorkerPayment Id.",
            "in": "path",
            "name": "workerPaymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWorkerPaymentRecord"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Get WorkerPaymentRecord",
        "tags": ["WorkerPayments"]
      }
    },
    "/api/rest/v1/employers/{employerId}/workers": {
      "get": {
        "description": "Retrieves all Workers within a given Employer.",
        "operationId": "getAllWorkers",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Zero-based page index (0..N)",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "description": "The size of the page to be returned",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 500,
              "minimum": 1
            }
          },
          {
            "description": "Sorting criteria. Prefix the property with - for descending order. Otherwise sort order is ascending. Multiple sort criteria are supported. If no sorting criteria is specified, sorting is not guaranteed however data may be sorted by a default criteria.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeListWorker"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve Workers",
        "tags": ["Workers"]
      },
      "post": {
        "description": "Creates a new Worker within the given Employer.",
        "operationId": "createWorker",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkerInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWorker"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWorker"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Create Worker",
        "tags": ["Workers"]
      }
    },
    "/api/rest/v1/employers/{employerId}/workers/mock-onboard": {
      "post": {
        "description": "Onboards a Worker using mocked information.",
        "operationId": "mockOnboard",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MockOnboardingWorkersInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeListMockOnboardingWorker"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Mock-onboard Worker",
        "tags": ["Mock Onboarding"]
      }
    },
    "/api/rest/v1/employers/{employerId}/workers/{workerId}": {
      "get": {
        "description": "Retrieves the Worker for a specific worker id within a given Employer.",
        "operationId": "getWorker",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Worker Id",
            "in": "path",
            "name": "workerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWorker"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve Worker",
        "tags": ["Workers"]
      },
      "put": {
        "description": "Updates a Worker within the given Employer.",
        "operationId": "updateWorker",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Worker Id",
            "in": "path",
            "name": "workerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkerInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWorker"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Update Worker",
        "tags": ["Workers"]
      }
    },
    "/api/rest/v1/employers/{employerId}/workers/{workerId}/capabilities": {
      "get": {
        "description": "Retrieves all the worker capabilities.",
        "operationId": "getWorkerCapabilities",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Worker Id.",
            "example": "wr_12323...",
            "in": "path",
            "name": "workerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWorkerCapabilities"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve worker capabilities.",
        "tags": ["Worker Capabilities"]
      }
    },
    "/api/rest/v1/employers/{employerId}/workers/{workerId}/contracts": {
      "post": {
        "description": "Creates a worker contract that contains the details of a worker's employment.",
        "operationId": "createWorkerContract",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Worker Id",
            "in": "path",
            "name": "workerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkerContractInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWorkerContract"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWorkerContract"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Create WorkerContract",
        "tags": ["Worker Contract"]
      }
    },
    "/api/rest/v1/employers/{employerId}/workers/{workerId}/contracts/{workerContractId}": {
      "put": {
        "description": "Updates a WorkerContract for a given Worker. WorkerContract's can only be updated if they have not been used in a payroll run.",
        "operationId": "updateWorkerContract",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Worker Id",
            "in": "path",
            "name": "workerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "WorkerContract Id",
            "in": "path",
            "name": "workerContractId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkerContractInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWorkerContract"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Update WorkerContract",
        "tags": ["Worker Contract"]
      }
    },
    "/api/rest/v1/employers/{employerId}/workers/{workerId}/onboardings": {
      "post": {
        "description": "Creates a hosted workflow that allows Workers to set themselves up within a given Employer.",
        "operationId": "createHostedWorkerOnboarding",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Worker Id",
            "in": "path",
            "name": "workerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeHostedWorkerOnboarding"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeHostedWorkerOnboarding"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Create HostedWorkerOnboarding",
        "tags": ["Worker Onboarding"]
      }
    },
    "/api/rest/v1/employers/{employerId}/workers/{workerId}/onboardings/{onboardingId}": {
      "get": {
        "description": "Retrieves a hosted workflow that allows Workers to set themselves up within a given Employer.",
        "operationId": "getHostedWorkerOnboarding",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Worker Id",
            "in": "path",
            "name": "workerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Hosted Worker Onboarding Id",
            "in": "path",
            "name": "onboardingId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeHostedWorkerOnboarding"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve HostedWorkerOnboarding",
        "tags": ["Worker Onboarding"]
      }
    },
    "/api/rest/v1/employers/{employerId}/workers/{workerId}/termination": {
      "get": {
        "operationId": "getWorkerTermination",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Worker Id",
            "in": "path",
            "name": "workerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWorkerTermination"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": ["worker-rest-controller-v-1"]
      }
    },
    "/api/rest/v1/employers/{employerId}/workers/{workerId}/work-locations": {
      "get": {
        "description": "Retrieves all the work locations assigned to the worker.",
        "operationId": "getWorkLocations",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Worker Id",
            "in": "path",
            "name": "workerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeListWorkerWorkLocationAssignment"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve work locations.",
        "tags": ["Worker Work Location"]
      }
    },
    "/api/rest/v1/employers/{employerId}/workers/{workerId}/work-locations/{workLocationId}": {
      "get": {
        "description": "Retrieves a work location by its id.",
        "operationId": "getWorkLocation",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Worker Id",
            "in": "path",
            "name": "workerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Work Location Id",
            "in": "path",
            "name": "workLocationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWorkerWorkLocationAssignment"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve a work location.",
        "tags": ["Worker Work Location"]
      }
    },
    "/api/rest/v1/employers/{employerId}/workers/{workerId}/worker-payment-records": {
      "get": {
        "description": "Retrieves WorkerPaymentRecords for a worker given a set of filters.",
        "operationId": "findPaymentRecordByWorkerId",
        "parameters": [
          {
            "description": "Employer Id.",
            "example": "er_12323...",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Worker Id.",
            "example": "wr_12323...",
            "in": "path",
            "name": "workerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Zero-based page index (0..N)",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "description": "The size of the page to be returned",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 500,
              "minimum": 1
            }
          },
          {
            "description": "Sorting criteria. Prefix the property with - for descending order. Otherwise sort order is ascending. Multiple sort criteria are supported. If no sorting criteria is specified, sorting is not guaranteed however data may be sorted by a default criteria.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Only retrieve the ones which pay date is in this day or on a later date. Can be combined with filter[endPayDate].",
            "example": "filter[startPayDate]=2023-01-01",
            "in": "query",
            "name": "filter[startPayDate]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Only retrieve the ones which pay date is in this day or on an earlier date. Can be combined with filter[startPayDate].",
            "example": "filter[endPayDate]=2023-02-28",
            "in": "query",
            "name": "filter[endPayDate]",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeListWorkerPaymentRecord"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve all WorkerPaymentRecords",
        "tags": ["WorkerPaymentRecord"]
      }
    },
    "/api/rest/v1/employers/{employerId}/workers/{workerId}/worker-payments": {
      "get": {
        "operationId": "getWorkerPaymentsByStatus",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Worker Id.",
            "in": "path",
            "name": "workerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter WorkerPayments by status.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/WorkerPaymentStatusInput"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeListWorkerPayment"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve WorkerPayments",
        "tags": ["WorkerPayments"]
      },
      "post": {
        "description": "Creates a new WorkerPayment. The WorkerPayment is the payroll calculation for a single worker and will have a status of PENDING to allow for modifications.",
        "operationId": "createWorkerPayment",
        "parameters": [
          {
            "description": "Employer Id",
            "in": "path",
            "name": "employerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Worker Id.",
            "in": "path",
            "name": "workerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkerPaymentInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWorkerPayment"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWorkerPayment"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Create WorkerPayment",
        "tags": ["WorkerPayments"]
      }
    },
    "/api/rest/v1/organization-compensation-policies": {
      "get": {
        "description": "Retrieves all OrganizationCompensationPolicies for the authenticated organization.",
        "operationId": "getAllOrganizationCompensationPolicies",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeListOrganizationCompensationPolicy"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve all OrganizationCompensationPolicies",
        "tags": ["OrganizationCompensationPolicy"]
      }
    },
    "/api/rest/v1/organization-compensation-policies/{organizationCompensationPolicyId}": {
      "get": {
        "description": "Retrieves an OrganizationCompensationPolicy for a specific compensation Id.",
        "operationId": "getOrganizationCompensationPolicy",
        "parameters": [
          {
            "description": "Compensation Policy Id",
            "in": "path",
            "name": "organizationCompensationPolicyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeOrganizationCompensationPolicy"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve OrganizationCompensationPolicies",
        "tags": ["OrganizationCompensationPolicy"]
      }
    },
    "/api/rest/v1/paystream": {
      "post": {
        "description": "Allows for ingestion of payroll related data via Paystream. The includes: Compensations, Employers, Workers. The Paystream API is intended as a fast \"send and forget\" API.",
        "operationId": "ingest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaystreamInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaystreamRestApiEnvelopeListPaystreamItemRestDomain"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaystreamRestApiEnvelopeListPaystreamItemRestDomain"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Send Paystream item",
        "tags": ["Paystream"]
      }
    },
    "/api/rest/v1/paystream/compensations": {
      "post": {
        "description": "Simple endpoint for synchronously ingesting compensations via Paystream.",
        "operationId": "compensationsCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaystreamCompensationsInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaystreamRestApiEnvelopeListPaystreamCompensationItem"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaystreamRestApiEnvelopeListPaystreamCompensationItem"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Import Compensations",
        "tags": ["Paystream"]
      }
    },
    "/api/rest/v1/paystream/employers": {
      "post": {
        "description": "Simple endpoint for synchronously ingesting employers via Paystream.",
        "operationId": "employersCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaystreamEmployersInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaystreamRestApiEnvelopeListPaystreamEmployer"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaystreamRestApiEnvelopeListPaystreamEmployer"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Import Employers",
        "tags": ["Paystream"]
      }
    },
    "/api/rest/v1/paystream/workers": {
      "post": {
        "description": "Simple endpoint for synchronously ingesting workers via Paystream.",
        "operationId": "workerCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaystreamWorkersInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaystreamRestApiEnvelopeListPaystreamWorker"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaystreamRestApiEnvelopeListPaystreamWorker"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Import Workers",
        "tags": ["Paystream"]
      }
    },
    "/api/rest/v1/webhook-endpoints": {
      "get": {
        "description": "Retrieves all WebhookEndpoints.",
        "operationId": "getAllWebhookEndpoints",
        "parameters": [
          {
            "in": "header",
            "name": "X-Salsa-Organization-Id",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeListWebhookEndpoint"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve all WebhookEndpoints",
        "tags": ["WebhookEndpoint"]
      },
      "post": {
        "callbacks": {
          "WebhookEvent": {
            "https://configured-webhook-enpoint.com": {
              "post": {
                "description": "Events are sent with the following envelope: { \"data\": { \"attributes\": { <event-type-body> }, \"type\": \"<event-type-name>\" } } ",
                "operationId": "Webhook Event",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/WebhookRequestEnvelope"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Return this code if the event is accepted. Otherwise, Salsa will retry to send the event."
                  }
                },
                "summary": "Webhook event sent by Salsa"
              }
            }
          }
        },
        "description": "Creates a WebhookEndpoint. A WebhookEndpoint contains your endpoint URL that will receive Salsa webhook events.",
        "operationId": "createWebhookEndpoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookEndpointRestInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWebhookEndpoint"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Create WebhookEndpoint",
        "tags": ["WebhookEndpoint"]
      }
    },
    "/api/rest/v1/webhook-endpoints/{webhookEndpointId}": {
      "get": {
        "description": "Retrieves a WebhookEndpoint. A WebhookEndpoint contains your endpoint URL that will receive Salsa webhook events.",
        "operationId": "retrieveWebhookEndpoint",
        "parameters": [
          {
            "description": "WebhookEndpoint Id",
            "in": "path",
            "name": "webhookEndpointId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWebhookEndpoint"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve WebhookEndpoint",
        "tags": ["WebhookEndpoint"]
      },
      "put": {
        "description": "Updates a WebhookEndpoint. A WebhookEndpoint contains your endpoint URL that will receive Salsa webhook events.",
        "operationId": "updateWebhookEndpoint",
        "parameters": [
          {
            "description": "WebhookEndpoint Id",
            "in": "path",
            "name": "webhookEndpointId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookEndpointRestInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestApiEnvelopeWebhookEndpoint"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorApiEnvelope"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Update WebhookEndpoint",
        "tags": ["WebhookEndpoint"]
      }
    }
  },
  "components": {
    "schemas": {
      "Amount": {
        "type": "object",
        "discriminator": {
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/FixedAmount"
          },
          {
            "$ref": "#/components/schemas/RateBasedAmount"
          },
          {
            "$ref": "#/components/schemas/FrequencyBasedAmount"
          }
        ],
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "required": ["type"]
      },
      "AmountType": {
        "type": "string",
        "description": "Identifies the type of the amount.",
        "enum": ["FIXED", "RATE", "NOT_PROVIDED", "PERCENTAGE", "FREQUENCY"]
      },
      "ApiToken": {
        "type": "object",
        "properties": {
          "expiration": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp indicating the token expiration."
          },
          "token": {
            "type": "string",
            "description": "Unique authentication secret required to make requests.",
            "example": "eyJhbGiOiNiJ9.eyJzdWI..."
          }
        },
        "required": ["expiration", "token"]
      },
      "BlockerPayrollRunAlert": {
        "type": "object",
        "description": "An issue has been found in your operation, you cannot confirm the PayrollRun until you solve the issue.",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying this alert."
          },
          "message": {
            "type": "string",
            "description": "Detailed message explaining the purpose of this alert."
          }
        },
        "required": ["code", "message"],
        "title": "Blocker alert"
      },
      "CountryCodeISORestInput": {
        "type": "string",
        "description": "The ISO 3166-1 alpha-3 code for the country, e.g. USA for the USA and CAN for Canada.",
        "enum": ["USA", "CAN"]
      },
      "CreateEmployerInput": {
        "type": "object",
        "properties": {
          "businessName": {
            "type": "string",
            "description": "The name of the business.",
            "example": "Acme Solutions"
          },
          "country": {
            "$ref": "#/components/schemas/SupportedCountry"
          },
          "employerType": {
            "$ref": "#/components/schemas/EmployerType"
          },
          "externalId": {
            "type": "string",
            "description": "The Id used to represent the object in your system that is mapped to this Employer."
          },
          "legalName": {
            "type": "string",
            "description": "The legal name of the business.",
            "example": "Acme Solutions Inc."
          }
        },
        "required": ["businessName", "country"]
      },
      "CreateEmployerUserTokenInput": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateUserTokenInput"
          },
          {
            "type": "object",
            "properties": {
              "employerIds": {
                "type": "array",
                "description": "Specifies the Employer's to which the user token will be assigned.",
                "items": {
                  "type": "string",
                  "description": "Specifies the Employer's to which the user token will be assigned."
                }
              },
              "role": {
                "type": "string",
                "description": "The group of permissions assigned to the token.",
                "enum": ["EMPLOYER_ADMIN", "EMPLOYER_ONBOARDING"]
              },
              "timeToLiveInMinutes": {
                "type": "integer",
                "format": "int32",
                "default": 60,
                "description": "Determines the validity period of the user token in minutes.",
                "example": 60,
                "minimum": 1
              },
              "type": {
                "type": "string",
                "default": "CreateEmployerUserTokenInput",
                "description": "input type."
              }
            }
          }
        ],
        "description": "Creates new user tokens for a given Employer.",
        "required": ["employerIds", "role", "type"],
        "title": "Create Employer User Token Input"
      },
      "CreatePaymentRecordCompensationInput": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRecordCompensationInput"
          },
          {
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/Amount"
              },
              "compensationPolicyId": {
                "type": "string"
              },
              "operation": {
                "type": "string",
                "default": "CreatePaymentRecordCompensationInput",
                "description": "Operation"
              }
            }
          }
        ],
        "description": "Values to create a new PaymentRecordCompensation.",
        "required": ["amount", "compensationPolicyId", "operation"],
        "title": "Create PaymentRecordCompensation"
      },
      "CreatePaymentRecordDeductionInput": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRecordDeductionInput"
          },
          {
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/Amount"
              },
              "deductionPolicyId": {
                "type": "string"
              },
              "operation": {
                "type": "string",
                "default": "CreatePaymentRecordDeductionInput",
                "description": "Operation"
              }
            }
          }
        ],
        "description": "Values to create a new PaymentRecordDeduction.",
        "required": ["amount", "deductionPolicyId", "operation"],
        "title": "Create PaymentRecordDeduction"
      },
      "CreateUserTokenInput": {
        "type": "object",
        "discriminator": {
          "mapping": {
            "CreateEmployerUserTokenInput": "#/components/schemas/CreateEmployerUserTokenInput",
            "CreateWorkerUserTokenInput": "#/components/schemas/CreateWorkerUserTokenInput"
          },
          "propertyName": "type"
        },
        "properties": {
          "timeToLiveInMinutes": {
            "type": "integer",
            "format": "int32",
            "default": 60,
            "description": "Determines the validity period of the user token in minutes.",
            "example": 60,
            "minimum": 1
          },
          "type": {
            "type": "string"
          }
        }
      },
      "CreateWebhookEndpointRestInput": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Descriptive text for the WebhookEndpoint."
          },
          "endpointUrl": {
            "type": "string",
            "description": "Your Endpoint URL that will receive events from Salsa about your application."
          }
        },
        "required": ["description", "endpointUrl"]
      },
      "CreateWorkerContractInput": {
        "type": "object",
        "properties": {
          "classification": {
            "$ref": "#/components/schemas/WorkerClassification"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date",
            "description": "The date this WorkerContract is effective. If not provided, defaults to the first day of the current calendar year."
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "The last date this WorkerContract is effective."
          },
          "hireDate": {
            "type": "string",
            "format": "date",
            "description": "The date the Worker was hired."
          },
          "overtimeEligible": {
            "type": "boolean",
            "description": "Specifies whether the Worker is eligible for overtime payment."
          }
        }
      },
      "CreateWorkerInput": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Name that will be used in the UI. When displayName is provided firstName and lastName are optional.",
            "example": "John Doe"
          },
          "externalId": {
            "type": "string",
            "description": "The Id used to represent the object in your system that is mapped to this Worker."
          },
          "firstName": {
            "type": "string",
            "description": "First legal name of the Worker. When displayName is not provided this is required.",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last legal name of the Worker. When displayName is not provided this is required.",
            "example": "Doe"
          },
          "middleName": {
            "type": "string",
            "description": "Middle legal name of the Worker.",
            "example": "Adam"
          }
        }
      },
      "CreateWorkerPaymentCompensationInput": {
        "type": "object",
        "description": "Values to create a new WorkerPaymentCompensation.",
        "properties": {
          "amount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FixedAmount"
              },
              {
                "$ref": "#/components/schemas/FrequencyBasedAmount"
              },
              {
                "$ref": "#/components/schemas/RateBasedAmount"
              }
            ]
          },
          "compensationPolicyId": {
            "type": "string"
          }
        },
        "required": ["amount", "compensationPolicyId"],
        "title": "Create WorkerPaymentCompensation"
      },
      "CreateWorkerPaymentDeductionInput": {
        "type": "object",
        "description": "Values to create a new WorkerPaymentDeduction.",
        "properties": {
          "amount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FixedAmount"
              },
              {
                "$ref": "#/components/schemas/FrequencyBasedAmount"
              },
              {
                "$ref": "#/components/schemas/RateBasedAmount"
              }
            ]
          },
          "deductionPolicyId": {
            "type": "string"
          }
        },
        "required": ["amount", "deductionPolicyId"],
        "title": "Create WorkerPaymentDeduction"
      },
      "CreateWorkerPaymentInput": {
        "type": "object",
        "description": "Create a WorkerPayment",
        "properties": {
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriodInput"
          }
        },
        "required": ["payPeriod"]
      },
      "CreateWorkerUserTokenInput": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateUserTokenInput"
          },
          {
            "type": "object",
            "properties": {
              "role": {
                "type": "string",
                "description": "The group of permissions assigned to the token.",
                "enum": ["WORKER_USER", "WORKER_ONBOARDING"]
              },
              "timeToLiveInMinutes": {
                "type": "integer",
                "format": "int32",
                "default": 60,
                "description": "Determines the validity period of the user token in minutes.",
                "example": 60,
                "minimum": 1
              },
              "type": {
                "type": "string",
                "default": "CreateWorkerUserTokenInput",
                "description": "input type."
              },
              "workerId": {
                "type": "string",
                "description": "Specifies the Worker to which the user token will be assigned."
              }
            }
          }
        ],
        "description": "Creates new user tokens for a specific Worker.",
        "required": ["role", "type", "workerId"],
        "title": "Create Worker User Token Input"
      },
      "DayOfMonth": {
        "type": "string",
        "description": "Day of the month that the pay period ends.",
        "enum": [
          "FIRST",
          "SECOND",
          "THIRD",
          "FOURTH",
          "FIFTH",
          "SIXTH",
          "SEVENTH",
          "EIGHTH",
          "NINTH",
          "TENTH",
          "ELEVENTH",
          "TWELFTH",
          "THIRTEENTH",
          "FOURTEENTH",
          "FIFTEENTH",
          "SIXTEENTH",
          "SEVENTEENTH",
          "EIGHTEENTH",
          "NINETEENTH",
          "TWENTIETH",
          "TWENTY_FIRST",
          "TWENTY_SECOND",
          "TWENTY_THIRD",
          "TWENTY_FOURTH",
          "TWENTY_FIFTH",
          "TWENTY_SIXTH",
          "TWENTY_SEVENTH",
          "TWENTY_EIGHTH",
          "TWENTY_NINTH",
          "THIRTIETH",
          "END_OF_MONTH"
        ]
      },
      "DayOfMonthAbsolutePayScheduleDefinition": {
        "type": "object",
        "description": "Defines a PaySchedule where the pay day and the end of the period are defined as fixed days of the month.",
        "properties": {
          "frequency": {
            "$ref": "#/components/schemas/PayScheduleFrequency"
          },
          "payDay": {
            "$ref": "#/components/schemas/DayOfMonth"
          },
          "periodEndDay": {
            "$ref": "#/components/schemas/DayOfMonth"
          },
          "periodEndRelativeMonthToPayday": {
            "$ref": "#/components/schemas/RelativeMonth"
          },
          "type": {
            "type": "string",
            "description": "Definition type"
          }
        },
        "required": [
          "frequency",
          "payDay",
          "periodEndDay",
          "periodEndRelativeMonthToPayday",
          "type"
        ]
      },
      "DayOfMonthRelativePayScheduleDefinition": {
        "type": "object",
        "description": "Defines a PaySchedule where the pay day is defined as a fixed day of the month and the end date is defined based on a number of days before the pay day.",
        "properties": {
          "frequency": {
            "$ref": "#/components/schemas/PayScheduleFrequency"
          },
          "monthPayDay": {
            "$ref": "#/components/schemas/DayOfMonth"
          },
          "periodEndRelativeDays": {
            "type": "integer",
            "format": "int32",
            "description": "Number of days relative to the pay day (e.g. payDay is FIFTEENTH and periodEndRelativeDays is 3, that means the period ends on the 12th ot that month)."
          },
          "type": {
            "type": "string",
            "description": "Definition type"
          }
        },
        "required": [
          "frequency",
          "monthPayDay",
          "periodEndRelativeDays",
          "type"
        ]
      },
      "DayOfWeek": {
        "type": "string",
        "description": "The day of the week for the pay day.",
        "enum": [
          "MONDAY",
          "TUESDAY",
          "WEDNESDAY",
          "THURSDAY",
          "FRIDAY",
          "SATURDAY",
          "SUNDAY"
        ]
      },
      "DayOfWeekRelativePayScheduleDefinition": {
        "type": "object",
        "description": "Define a PaySchedule where the pay day is defined as a day of the week and the end date is defined based on a number of days before the pay day.",
        "properties": {
          "frequency": {
            "$ref": "#/components/schemas/PayScheduleFrequency"
          },
          "payDay": {
            "$ref": "#/components/schemas/DayOfWeek"
          },
          "periodEndRelativeDays": {
            "type": "integer",
            "format": "int32",
            "description": "Number of days relative to the pay day (e.g. payDay is FRIDAY and periodEndRelativeDays is 3, that means the period ends on the previous Tuesday)."
          },
          "type": {
            "type": "string",
            "description": "Definition type"
          }
        },
        "required": ["frequency", "payDay", "periodEndRelativeDays", "type"]
      },
      "Document": {
        "type": "object",
        "description": "Represents a payroll document such as a payslip or form.",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The datetime the document is created."
          },
          "documentLink": {
            "$ref": "#/components/schemas/DocumentLink"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the document."
          },
          "mediaType": {
            "type": "string",
            "description": "Media type of the file following RFC 2046.",
            "example": "application/pdf"
          },
          "status": {
            "$ref": "#/components/schemas/DocumentStatus"
          }
        },
        "required": ["createdAt", "id", "status"]
      },
      "DocumentLink": {
        "type": "object",
        "description": "Represents the temporary signed URL to access the file.",
        "properties": {
          "documentId": {
            "type": "string",
            "description": "Back reference to document."
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "The expiration time of the signed URL."
          },
          "url": {
            "type": "string",
            "description": "A signed URL to access a file that is valid until expiresAt."
          }
        },
        "required": ["documentId", "expiresAt", "url"]
      },
      "DocumentStatus": {
        "type": "string",
        "description": "Indicates if the file is rendered and ready for consumption.",
        "enum": ["PENDING_RENDER", "READY"]
      },
      "Employer": {
        "type": "object",
        "description": "Represents a legal entity that represents an Employer that will pay Workers.",
        "properties": {
          "businessName": {
            "type": "string",
            "description": "The name of the business.",
            "example": "Acme Solutions"
          },
          "country": {
            "$ref": "#/components/schemas/SupportedCountry"
          },
          "employerType": {
            "$ref": "#/components/schemas/EmployerType"
          },
          "externalId": {
            "type": "string",
            "description": "The Id used to represent the object in your system that is mapped to this Employer."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the Employer."
          },
          "legalName": {
            "type": "string",
            "description": "The legal name of the business.",
            "example": "Acme Solutions Inc."
          },
          "termsOfServiceAcceptance": {
            "$ref": "#/components/schemas/TermsOfServiceAcceptance"
          }
        },
        "required": [
          "businessName",
          "country",
          "employerType",
          "id",
          "termsOfServiceAcceptance"
        ]
      },
      "EmployerAccountStandingStatusChangedEvent": {
        "type": "object",
        "description": "Triggers `Employer.AccountStanding.statusChanged` when an employer account standing status changes.",
        "properties": {
          "employerId": {
            "type": "string",
            "description": "The unique identifier for the Employer."
          },
          "status": {
            "type": "string",
            "description": "Represents the current AccountStanding status for the Employer.",
            "enum": [
              "NEW_ACCOUNT",
              "IN_REVIEW",
              "ACTIVE",
              "RESTRICTED",
              "REJECTED",
              "CONDITIONAL"
            ]
          }
        },
        "required": ["employerId", "status"],
        "title": "Employer account standing status changed event"
      },
      "EmployerCapabilities": {
        "type": "object",
        "description": "Holds the statuses of the operations an Employer is able to perform.",
        "properties": {
          "payWorkers": {
            "$ref": "#/components/schemas/PayWorkersReadiness"
          }
        },
        "required": ["payWorkers"]
      },
      "EmployerCreatedEvent": {
        "type": "object",
        "description": "Triggers `Employer.created` when an Employer is created.",
        "properties": {
          "employerId": {
            "type": "string",
            "description": "The unique identifier for the Employer that was created."
          },
          "externalId": {
            "type": "string",
            "description": "The Id used to represent the object in your system that is mapped to this Employer."
          }
        },
        "required": ["employerId"],
        "title": "Employer created event"
      },
      "EmployerOnboardingStatusEvent": {
        "type": "object",
        "description": "Triggers `Employer.onboardingStatus` when an employer completes the onboarding form.",
        "properties": {
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the Employer completed the onboarding."
          },
          "employerId": {
            "type": "string",
            "description": "The unique identifier for the Employer."
          },
          "hostedEmployerOnboardingId": {
            "type": "string",
            "description": "The unique identifier for the HostedEmployerOnboarding. Present when the onboarding is completed via Salsa hosted experience."
          },
          "status": {
            "type": "string",
            "description": "Represents the current onboarding stage for the Employer.",
            "enum": ["INVITED", "STARTED", "COMPLETED", "INVALIDATED"]
          }
        },
        "required": ["employerId", "status"],
        "title": "Employer onboarding status event"
      },
      "EmployerPayWorkersReadinessStatusChangedEvent": {
        "type": "object",
        "description": "Triggers `Employer.PayWorkersReadiness.statusChanged` when an employer pay workers readiness status changes.",
        "properties": {
          "employerId": {
            "type": "string",
            "description": "The unique identifier for the Employer."
          },
          "implementedAt": {
            "type": "string",
            "format": "date",
            "description": "Timestamp when the Employer completed the implementation phase."
          },
          "onboardedAt": {
            "type": "string",
            "format": "date",
            "description": "Timestamp when the Employer completed the onboarding phase."
          },
          "status": {
            "type": "string",
            "description": "Represents the PayWorkersReadiness status for the Employer.",
            "enum": ["ONBOARDING", "IMPLEMENTATION", "READY"]
          }
        },
        "required": ["employerId", "status"],
        "title": "Employer pay workers readiness status changed event"
      },
      "EmployerType": {
        "type": "string",
        "description": "The business entity type of the employer which determines which income tax return forms will be filed. If not provided, defaults to BUSINESS.",
        "enum": ["BUSINESS", "HOUSEHOLD"],
        "example": "BUSINESS"
      },
      "EmployerUpdatedEvent": {
        "type": "object",
        "description": "Triggers `Employer.updated` when an Employer is updated.",
        "properties": {
          "employerId": {
            "type": "string",
            "description": "The unique identifier for the Employer that was updated."
          },
          "externalId": {
            "type": "string",
            "description": "The Id used to represent the object in your system that is mapped to this Employer."
          }
        },
        "required": ["employerId"],
        "title": "Employer updated event"
      },
      "EmployerWorkLocation": {
        "type": "object",
        "description": "Represents a physical location where the employer conducts business.",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/EmployerWorkLocationAddress"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for a work location."
          },
          "isDefaultWorkLocation": {
            "type": "boolean",
            "description": "Whether this work location is the default work location for this employer."
          }
        },
        "required": ["address", "id", "isDefaultWorkLocation"]
      },
      "EmployerWorkLocationAddress": {
        "type": "object",
        "description": "Employer address that is used as this work location",
        "properties": {
          "addressLine1": {
            "type": "string",
            "description": "The first line of the address."
          },
          "addressLine2": {
            "type": "string",
            "description": "The second line of the address."
          },
          "administrativeArea": {
            "type": "string",
            "description": "Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture."
          },
          "country": {
            "$ref": "#/components/schemas/SupportedCountry"
          },
          "locality": {
            "type": "string",
            "description": "Generally refers to the city/town portion of the address. e.g in the US it would be City, in the UK Town"
          },
          "name": {
            "type": "string",
            "description": "Name assigned to this address by the employer."
          },
          "postalCode": {
            "type": "string",
            "description": "Code assigned to geographical areas and used to sort mail. e.g in the US this would be the zip code of the address. Supports both ZIP and ZIP+4."
          }
        },
        "required": [
          "addressLine1",
          "administrativeArea",
          "country",
          "locality",
          "postalCode"
        ]
      },
      "EmployerWorkerPaymentsReadinessStatusChangedEvent": {
        "type": "object",
        "description": "Triggers `Worker.PaymentsReadiness.statusChanged` when an worker payments readiness status changes.",
        "properties": {
          "employerId": {
            "type": "string",
            "description": "The unique identifier for the Employer."
          },
          "onboardedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the Worker completed the onboarding phase."
          },
          "status": {
            "type": "string",
            "description": "Represents the PaymentsReadiness status for the Worker.",
            "enum": ["ONBOARDING", "PARTIALLY_READY", "READY", "NOT_READY"]
          },
          "workerId": {
            "type": "string",
            "description": "The unique identifier for the Worker."
          }
        },
        "required": ["employerId", "status", "workerId"],
        "title": "Worker payments readiness status changed event"
      },
      "ErrorApi": {
        "type": "object",
        "description": "An array of details about specific errors that led to this reported error",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable representation of the error"
          },
          "target": {
            "type": "string",
            "description": "The target of the error"
          }
        },
        "required": ["message"]
      },
      "ErrorApiEnvelope": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ErrorRestResponse"
          }
        }
      },
      "ErrorRestResponse": {
        "type": "object",
        "properties": {
          "details": {
            "type": "array",
            "description": "An array of details about specific errors that led to this reported error",
            "items": {
              "$ref": "#/components/schemas/ErrorApi"
            }
          },
          "message": {
            "type": "string",
            "description": "A human-readable representation of the error"
          },
          "target": {
            "type": "string",
            "description": "The target of the error"
          }
        }
      },
      "FixedAmount": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "format": "money",
            "example": "100.21"
          },
          "type": {
            "type": "string",
            "default": "FIXED",
            "description": "Amount type"
          }
        },
        "required": ["amount", "type"],
        "title": "Fixed amount"
      },
      "FrequencyBasedAmount": {
        "type": "object",
        "properties": {
          "frequency": {
            "$ref": "#/components/schemas/FrequencyBasedFrequencyRestModel"
          },
          "rate": {
            "type": "string",
            "format": "money",
            "example": "100.21"
          },
          "type": {
            "type": "string",
            "default": "FREQUENCY",
            "description": "Amount type"
          }
        },
        "required": ["frequency", "rate", "type"],
        "title": "Frequency based amount"
      },
      "FrequencyBasedFrequencyRestInput": {
        "type": "string",
        "description": "When defined, specifies the period that the rate of pay covers. For example, if we set a YEARLY frequency and we pay monthly then our rate to pay for this pay period would be divided by 12.",
        "enum": ["WEEKLY", "MONTHLY", "YEARLY"]
      },
      "FrequencyBasedFrequencyRestModel": {
        "type": "string",
        "enum": ["WEEKLY", "MONTHLY", "YEARLY"]
      },
      "HostedEmployerOnboarding": {
        "type": "object",
        "properties": {
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The time that the onboarding of the Employer was completed."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for this HostedEmployerOnboarding."
          },
          "inviteExpirationTime": {
            "type": "string",
            "format": "date-time",
            "description": "The expiration time of the invite URL."
          },
          "inviteUrl": {
            "type": "string",
            "description": "The distinct invite URL that can be shared with the Employer for onboarding."
          },
          "status": {
            "$ref": "#/components/schemas/HostedEmployerOnboardingStatus"
          }
        },
        "required": ["id", "inviteExpirationTime", "status"]
      },
      "HostedEmployerOnboardingStatus": {
        "type": "string",
        "description": "Indicates the status of the onboarding request for this Employer.",
        "enum": ["INVITED", "STARTED", "COMPLETED", "INVALIDATED"]
      },
      "HostedWorkerOnboarding": {
        "type": "object",
        "properties": {
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The time that the onboarding of the Worker was completed."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for this HostedWorkerOnboarding."
          },
          "inviteExpirationTime": {
            "type": "string",
            "format": "date-time",
            "description": "The expiration time of the invite URL."
          },
          "inviteUrl": {
            "type": "string",
            "description": "The distinct invite URL that can be shared with the Worker for onboarding."
          },
          "status": {
            "$ref": "#/components/schemas/HostedWorkerOnboardingStatus"
          }
        },
        "required": ["id", "inviteExpirationTime", "status"]
      },
      "HostedWorkerOnboardingStatus": {
        "type": "string",
        "description": "Indicates the status of the onboarding request for this Worker.",
        "enum": ["INVITED", "STARTED", "COMPLETED", "INVALIDATED"]
      },
      "InfoPayrollRunAlert": {
        "type": "object",
        "description": "Provides additional contextual insights for the payroll run.",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying this alert."
          },
          "message": {
            "type": "string",
            "description": "Detailed message explaining the purpose of this alert."
          }
        },
        "required": ["code", "message"],
        "title": "Info alert"
      },
      "MockOnboardingEmployer": {
        "type": "object",
        "properties": {
          "employerId": {
            "type": "string",
            "description": "The unique identifier for the Employer."
          },
          "readiness": {
            "$ref": "#/components/schemas/MockOnboardingEmployerReadinessRestDomain"
          }
        },
        "required": ["employerId", "readiness"]
      },
      "MockOnboardingEmployerReadinessRestDomain": {
        "type": "object",
        "description": "Information detailing the readiness of various capabilities available to the Employer.",
        "properties": {
          "workerPayment": {
            "$ref": "#/components/schemas/MockOnboardingReadiness"
          }
        },
        "required": ["workerPayment"]
      },
      "MockOnboardingReadiness": {
        "type": "object",
        "description": "Indicates whether this Worker is ready to receive worker payments.",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/MockOnboardingReadinessStatus"
          }
        },
        "required": ["status"]
      },
      "MockOnboardingReadinessStatus": {
        "type": "string",
        "description": "Indicates the readiness state of this capability.",
        "enum": ["READY"]
      },
      "MockOnboardingWorker": {
        "type": "object",
        "properties": {
          "readiness": {
            "$ref": "#/components/schemas/MockOnboardingWorkerReadiness"
          },
          "workerId": {
            "type": "string",
            "description": "The unique identifier for the Worker."
          }
        },
        "required": ["readiness", "workerId"]
      },
      "MockOnboardingWorkerReadiness": {
        "type": "object",
        "description": "Information detailing the readiness of various capabilities available to the Worker.",
        "properties": {
          "workerPayment": {
            "$ref": "#/components/schemas/MockOnboardingReadiness"
          }
        },
        "required": ["workerPayment"]
      },
      "MockOnboardingWorkersInput": {
        "type": "object",
        "properties": {
          "workerIds": {
            "type": "array",
            "description": "A list of Worker Ids to onboard",
            "items": {
              "type": "string",
              "description": "A list of Worker Ids to onboard"
            }
          }
        },
        "required": ["workerIds"]
      },
      "MoneyMovementDisbursementStatus": {
        "type": "string",
        "description": "The status of the disbursement for each worker in this PayrollRun.",
        "enum": [
          "PENDING",
          "AWAITING",
          "DISBURSED",
          "PARTIALLY_DISBURSED",
          "NOT_APPLICABLE",
          "RETURNED",
          "CANCELLED"
        ]
      },
      "MoneyMovementEmployerFundingStatus": {
        "type": "string",
        "description": "The status of the employer funding for this PayrollRun.",
        "enum": [
          "PENDING",
          "AWAITING",
          "FUNDED",
          "NOT_APPLICABLE",
          "RETURNED",
          "CANCELLED"
        ]
      },
      "MoneyMovementPaymentStatus": {
        "type": "string",
        "description": "The overall state of the payment for this PayrollRun.",
        "enum": ["PENDING", "AWAITING", "COMPLETE", "CANCELLED", "FAILED"]
      },
      "MonthlyAbsolutePeriodDefinition": {
        "type": "object",
        "description": "definition of the second period",
        "properties": {
          "payDay": {
            "$ref": "#/components/schemas/DayOfMonth"
          },
          "periodEndDay": {
            "$ref": "#/components/schemas/DayOfMonth"
          },
          "periodEndRelativeMonthToPayday": {
            "$ref": "#/components/schemas/RelativeMonth"
          }
        },
        "required": ["payDay", "periodEndDay", "periodEndRelativeMonthToPayday"]
      },
      "MonthlyRelativePeriodDefinition": {
        "type": "object",
        "description": "definition of the second period",
        "properties": {
          "payDay": {
            "$ref": "#/components/schemas/DayOfMonth"
          },
          "periodEndRelativeDays": {
            "type": "integer",
            "format": "int32",
            "description": "Number of days relative to the pay day (e.g. payDay is FIFTEENTH and periodEndRelativeDays is 3, that means the period ends on the 12th ot that month)."
          }
        },
        "required": ["payDay", "periodEndRelativeDays"]
      },
      "NotificationEmployerPaydayReminderEvent": {
        "type": "object",
        "description": "Triggers `Notification.employerPaydayReminder` 2 days before the employer has to confirm the next scheduled payroll run.",
        "properties": {
          "canBeFulfilled": {
            "type": "boolean",
            "description": "Indicates whether the payments for this payroll can be fulfilled given the currently specified pay date."
          },
          "confirmBy": {
            "type": "string",
            "format": "date-time",
            "description": "Latest date the Employer should confirm payroll in order for the Workers to get paid on time."
          },
          "employerId": {
            "type": "string",
            "description": "The unique identifier for the Employer."
          },
          "payDate": {
            "type": "string",
            "format": "date",
            "description": "The date the workers will be paid for the next scheduled PayrollRun."
          },
          "periodEnd": {
            "type": "string",
            "format": "date",
            "description": "The end of the period for the next scheduled PayrollRun."
          },
          "periodStart": {
            "type": "string",
            "format": "date",
            "description": "The start of the period for the next scheduled PayrollRun."
          }
        },
        "required": [
          "canBeFulfilled",
          "employerId",
          "payDate",
          "periodEnd",
          "periodStart"
        ],
        "title": "Employer payday reminder event"
      },
      "NotificationEmployerPayrollRunConfirmationEvent": {
        "type": "object",
        "description": "Triggers `Notification.employerPayrollRunConfirmation` when an Employer confirms a payroll run.",
        "properties": {
          "contractorPay": {
            "type": "string",
            "format": "money",
            "description": "The amount paid to contractors for this PayrollRun.",
            "example": "100.21"
          },
          "debitAmount": {
            "type": "string",
            "format": "money",
            "description": "The amount the Employer will be debited for this PayrollRun.",
            "example": "100.21"
          },
          "debitDate": {
            "type": "string",
            "format": "date",
            "description": "The date that the Employer's bank account will be debited for the cost of this PayrollRun."
          },
          "employeePay": {
            "type": "string",
            "format": "money",
            "description": "The amount paid to employees for this PayrollRun.",
            "example": "100.21"
          },
          "employerId": {
            "type": "string",
            "description": "The unique identifier for the Employer"
          },
          "employerTaxes": {
            "type": "string",
            "format": "money",
            "description": "The amount of taxes that will be paid by the Employer for this PayrollRun.",
            "example": "100.21"
          },
          "payDate": {
            "type": "string",
            "format": "date",
            "description": "The date the workers will be paid for this pay period of this PayrollRun."
          },
          "payrollRunId": {
            "type": "string",
            "description": "The unique identifier for the PayrollRun that was confirmed."
          },
          "periodEnd": {
            "type": "string",
            "format": "date",
            "description": "The end of the period that the Workers will be paid for on this PayrollRun."
          },
          "periodStart": {
            "type": "string",
            "format": "date",
            "description": "The start of the period that the Workers will be paid for on this PayrollRun."
          },
          "totalCost": {
            "type": "string",
            "format": "money",
            "description": "The total cost for this PayrollRun, including costs that Salsa does not withhold.",
            "example": "100.21"
          }
        },
        "required": [
          "contractorPay",
          "employeePay",
          "employerId",
          "employerTaxes",
          "payDate",
          "payrollRunId",
          "periodEnd",
          "periodStart",
          "totalCost"
        ],
        "title": "Employer payroll run confirmation event"
      },
      "NotificationWorkerPaydayEvent": {
        "type": "object",
        "description": "Triggers `Notification.workerPayday` when a worker is paid.",
        "properties": {
          "employerId": {
            "type": "string",
            "description": "The unique identifier for the Employer for this Worker."
          },
          "payDate": {
            "type": "string",
            "format": "date",
            "description": "The date the worker was paid with this Payslip."
          },
          "payslipId": {
            "type": "string",
            "description": "The unique identifier for the Worker's Payslip."
          },
          "periodEnd": {
            "type": "string",
            "format": "date",
            "description": "The end of the period for the payDate."
          },
          "periodStart": {
            "type": "string",
            "format": "date",
            "description": "The start of the period for the payDate."
          },
          "workerId": {
            "type": "string",
            "description": "The unique identifier for the Worker that was paid."
          }
        },
        "required": [
          "employerId",
          "payDate",
          "payslipId",
          "periodEnd",
          "periodStart",
          "workerId"
        ],
        "title": "Worker payday event"
      },
      "OrganizationCompensationPolicy": {
        "type": "object",
        "description": "A compensation policy represents a pattern with specific default values for any compensation associated with it.",
        "properties": {
          "calculationMethod": {
            "$ref": "#/components/schemas/OrganizationCompensationPolicyCalculationMethod"
          },
          "description": {
            "type": "string",
            "description": "Description for the OrganizationCompensationPolicy."
          },
          "id": {
            "type": "string",
            "description": "he unique identifier for the OrganizationCompensationPolicy."
          },
          "referenceId": {
            "type": "string",
            "description": "Human readable unique identifier for an OrganizationCompensationPolicy."
          }
        },
        "required": ["calculationMethod", "description", "id", "referenceId"]
      },
      "OrganizationCompensationPolicyCalculationMethod": {
        "type": "string",
        "description": "Determines how the final amount for this compensation will be calculated.",
        "enum": [
          "FIXED_AMOUNT",
          "HOURLY_BASED_AMOUNT",
          "FREQUENCY_BASED_AMOUNT"
        ]
      },
      "PatchWorkerPaymentInput": {
        "type": "object",
        "description": "Operation to change a given WorkerPayment.",
        "properties": {
          "compensations": {
            "type": "array",
            "description": "List of compensations to update or create.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreatePaymentRecordCompensationInput"
                },
                {
                  "$ref": "#/components/schemas/UpdatePaymentRecordCompensationInput"
                }
              ]
            }
          },
          "deductions": {
            "type": "array",
            "description": "List of deductions to update or create.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreatePaymentRecordDeductionInput"
                },
                {
                  "$ref": "#/components/schemas/UpdatePaymentRecordDeductionInput"
                }
              ]
            }
          },
          "excluded": {
            "type": "boolean",
            "description": "Specify whether this WorkerPayment should be excluded or included form the PayrollRun."
          },
          "payMethod": {
            "$ref": "#/components/schemas/WorkerPaymentRecordPayMethod"
          },
          "workerId": {
            "type": "string",
            "description": "WorkerId of the WorkerPayment to update."
          }
        },
        "required": ["workerId"]
      },
      "PayMethodRestDomain": {
        "type": "string",
        "description": "The method by which the PaymentRecord's amount will be transferred to the worker.",
        "enum": ["PAPER_CHECK", "DIRECT_DEPOSIT"]
      },
      "PayPeriod": {
        "type": "object",
        "description": "Represents a specific period of time during which an employer pays their workers for the work they have completed.",
        "properties": {
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "Date when the period ends."
          },
          "payDate": {
            "type": "string",
            "format": "date",
            "description": "Date when the payment is made for this pay period. The pay date could be before, after, or within the pay period."
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "Date when the period starts."
          }
        },
        "required": ["endDate", "payDate", "startDate"]
      },
      "PayPeriodInput": {
        "type": "object",
        "description": "Represents a specific period of time during which an employer pays their workers for the work they have completed.",
        "properties": {
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "Date when the period ends."
          },
          "payDate": {
            "type": "string",
            "format": "date",
            "description": "Date when the payment is made for this pay period. The pay date could be before, after, or within the pay period."
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "Date when the period starts."
          }
        },
        "required": ["endDate", "payDate", "startDate"]
      },
      "PaySchedule": {
        "type": "object",
        "description": "Defines the frequency on which a worker should be paid.",
        "properties": {
          "currentYearPayPeriods": {
            "type": "array",
            "description": "The pay periods for the current tax year.",
            "items": {
              "$ref": "#/components/schemas/PayPeriod"
            }
          },
          "definition": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DayOfMonthAbsolutePayScheduleDefinition"
              },
              {
                "$ref": "#/components/schemas/DayOfMonthRelativePayScheduleDefinition"
              },
              {
                "$ref": "#/components/schemas/DayOfWeekRelativePayScheduleDefinition"
              },
              {
                "$ref": "#/components/schemas/SemiMonthlyAbsolutePayScheduleDefinition"
              },
              {
                "$ref": "#/components/schemas/SemiMonthlyRelativePayScheduleDefinition"
              }
            ]
          },
          "initialPayDate": {
            "type": "string",
            "format": "date",
            "description": "Initial pay day on this schedule."
          },
          "initialPayPeriodEndDate": {
            "type": "string",
            "format": "date",
            "description": "Initial period end date on this schedule."
          },
          "nextPayPeriod": {
            "$ref": "#/components/schemas/PayPeriod"
          }
        },
        "required": [
          "currentYearPayPeriods",
          "definition",
          "initialPayDate",
          "initialPayPeriodEndDate",
          "nextPayPeriod"
        ]
      },
      "PayScheduleDefinition": {
        "type": "object",
        "description": "Pay schedule rules for frequency of payment.",
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "required": ["type"]
      },
      "PayScheduleFrequency": {
        "type": "string",
        "description": "Frequencies that are supported to set up a schedule.",
        "enum": ["BIWEEKLY", "MONTHLY", "WEEKLY", "SEMI_MONTHLY"]
      },
      "PayWorkersReadiness": {
        "type": "object",
        "description": "Holds information about the ability of the Employer to pay Workers",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PayWorkersReadinessStatus"
          }
        },
        "required": ["status"]
      },
      "PayWorkersReadinessStatus": {
        "type": "string",
        "description": "Indicates the status of the PayWorkersReadiness for this Employer.",
        "enum": ["ONBOARDING", "IMPLEMENTATION", "READY"]
      },
      "PaymentRecordCompensationInput": {
        "type": "object",
        "description": "List of compensations to update or create.",
        "discriminator": {
          "propertyName": "operation"
        },
        "properties": {
          "operation": {
            "type": "string"
          }
        },
        "required": ["operation"]
      },
      "PaymentRecordDeductionInput": {
        "type": "object",
        "description": "List of deductions to update or create.",
        "discriminator": {
          "propertyName": "operation"
        },
        "properties": {
          "operation": {
            "type": "string"
          }
        },
        "required": ["operation"]
      },
      "PaymentsReadiness": {
        "type": "object",
        "description": "Holds information about the ability of the Worker to be paid.",
        "properties": {
          "requirements": {
            "type": "array",
            "description": "List of Requirements that are pending to be completed for this Worker.",
            "items": {
              "$ref": "#/components/schemas/ReadinessRequirement"
            }
          },
          "status": {
            "$ref": "#/components/schemas/PaymentsReadinessStatus"
          }
        },
        "required": ["requirements", "status"]
      },
      "PaymentsReadinessStatus": {
        "type": "string",
        "description": "Indicates the status of the PaymentsReadiness for this Worker.",
        "enum": ["ONBOARDING", "PARTIALLY_READY", "NOT_READY", "READY"]
      },
      "PayrollRun": {
        "type": "object",
        "description": "Represents a collection of WorkerPayments that were calculated together in a particular pay period. It centralizes all the operations around running payroll like taxes and payments.",
        "properties": {
          "alerts": {
            "$ref": "#/components/schemas/PayrollRunAlertsRestDomain"
          },
          "compensationPolicies": {
            "type": "array",
            "description": "List of all PayrollRunCompensationPolicies associated to the PayrollRunCompensations included in the calculation of this PayrollRun.",
            "items": {
              "$ref": "#/components/schemas/PayrollRunCompensationPolicy"
            }
          },
          "confirmBy": {
            "type": "string",
            "format": "date-time",
            "description": "The employer must confirm this PayrollRun not later than this date to get the funds transferred on time."
          },
          "confirmedDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the PayrollRun was confirmed."
          },
          "debitDate": {
            "type": "string",
            "format": "date",
            "description": "The date when the employer's bank account is debited for the PayrollRun cost, which includes both worker wages and taxes owed by the employer."
          },
          "deductionPolicies": {
            "type": "array",
            "description": "List of all PayrollRunDeductionPolicies associated to the PayrollRunDeductions included in the calculation of this PayrollRun.",
            "items": {
              "$ref": "#/components/schemas/PayrollRunDeductionPolicy"
            }
          },
          "employerId": {
            "type": "string",
            "description": "The Employer Id to which the PayrollRun is for."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the PayrollRun."
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriod"
          },
          "status": {
            "$ref": "#/components/schemas/PayrollRunStatus"
          },
          "totals": {
            "$ref": "#/components/schemas/PayrollRunTotals"
          },
          "workerPayGroupId": {
            "type": "string",
            "description": "The WorkerPayGroup that was used to generate the list of workers for this PayrollRun."
          },
          "workerPayments": {
            "type": "array",
            "description": "WorkerPayments for each worker included in this PayrollRun calculation.",
            "items": {
              "$ref": "#/components/schemas/WorkerPayment"
            }
          }
        },
        "required": [
          "alerts",
          "compensationPolicies",
          "deductionPolicies",
          "employerId",
          "id",
          "payPeriod",
          "status",
          "totals",
          "workerPayments"
        ]
      },
      "PayrollRunAlertsRestDomain": {
        "type": "object",
        "description": "Alerts associated to this worker.",
        "properties": {
          "blockers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockerPayrollRunAlert"
            }
          },
          "info": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InfoPayrollRunAlert"
            }
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WarningPayrollRunAlert"
            }
          }
        },
        "required": ["blockers", "info", "warnings"]
      },
      "PayrollRunAwaitingInputEvent": {
        "type": "object",
        "description": "Triggers `PayrollRun.awaitingInput` when compensation data is required for a payroll run. When you receive this event you must send all of the worker compensation data you have for the listed Workers within the interval provided. This data will be used to update the PayrollRun as an Employer is running payroll.",
        "properties": {
          "employerId": {
            "type": "string",
            "description": "The unique identifier for the Employer."
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayrollRunAwaitingInputEventPayPeriod"
          },
          "workerIds": {
            "type": "array",
            "description": "The list of unique Worker identifiers we are requesting data for.",
            "items": {
              "type": "string",
              "description": "The list of unique Worker identifiers we are requesting data for."
            }
          }
        },
        "required": ["employerId", "payPeriod", "workerIds"],
        "title": "Payroll run awaiting input event"
      },
      "PayrollRunAwaitingInputEventPayPeriod": {
        "type": "object",
        "description": "The pay period we are requesting worker compensation data for.",
        "properties": {
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "The end of the period we are requesting worker compensation data for."
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "The start of the period we are requesting worker compensation data for."
          }
        },
        "required": ["endDate", "startDate"],
        "title": "Pay Period for Payroll run awaiting input event"
      },
      "PayrollRunCalculateFromPayGroupInput": {
        "type": "object",
        "description": "Creates a PayrollRun for the workers included in the PayGroup.",
        "properties": {
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriodInput"
          },
          "type": {
            "type": "string",
            "default": "PayrollRunCalculateFromPayGroupInput",
            "description": "Input type."
          },
          "workerPayGroupId": {
            "type": "string",
            "description": "Id of the WorkerPayGroup."
          }
        },
        "required": ["payPeriod", "type", "workerPayGroupId"],
        "title": "Create PayrollRun from PayGroup"
      },
      "PayrollRunCalculateFromWorkerListInput": {
        "type": "object",
        "description": "Creates a PayrollRun for the worker Ids provided.",
        "properties": {
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriodInput"
          },
          "type": {
            "type": "string",
            "default": "PayrollRunCalculateFromWorkerListInput",
            "description": "Input type."
          },
          "workerIds": {
            "type": "array",
            "description": "List of Worker Ids to calculate in the PayrollRun.",
            "items": {
              "type": "string",
              "description": "List of Worker Ids to calculate in the PayrollRun."
            }
          }
        },
        "required": ["payPeriod", "type", "workerIds"],
        "title": "Create PayrollRun from list of Workers"
      },
      "PayrollRunCalculateRestInput": {
        "type": "object",
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "required": ["type"]
      },
      "PayrollRunCompensationPolicy": {
        "type": "object",
        "description": "List of all PayrollRunCompensationPolicies associated to the PayrollRunCompensations included in the calculation of this PayrollRun.",
        "properties": {
          "amountType": {
            "$ref": "#/components/schemas/AmountType"
          },
          "id": {
            "type": "string",
            "description": "Id of the PayrollRunCompensationPolicy."
          },
          "name": {
            "type": "string",
            "description": "Human readable description for the PayrollRunCompensationPolicy."
          }
        },
        "required": ["amountType", "id", "name"]
      },
      "PayrollRunDeductionPolicy": {
        "type": "object",
        "description": "List of all PayrollRunDeductionPolicies associated to the PayrollRunDeductions included in the calculation of this PayrollRun.",
        "properties": {
          "amountType": {
            "$ref": "#/components/schemas/AmountType"
          },
          "id": {
            "type": "string",
            "description": "Id of the PayrollRunDeductionPolicy."
          },
          "name": {
            "type": "string",
            "description": "Human readable description of the PayrollRunDeductionPolicy."
          }
        },
        "required": ["amountType", "id", "name"]
      },
      "PayrollRunLifecycleStatus": {
        "type": "string",
        "description": "The overall status of the PayrollRun.",
        "enum": ["DRAFT", "PROCESSING", "COMPLETED", "CANCELLED", "FAILED"]
      },
      "PayrollRunPreview": {
        "type": "object",
        "description": "Represents a preview of WorkerPayments that were calculated together in a particular pay period. ",
        "properties": {
          "alerts": {
            "$ref": "#/components/schemas/PayrollRunAlertsRestDomain"
          },
          "employerId": {
            "type": "string",
            "description": "The Employer Id to which the PayrollRun preview is for."
          },
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriod"
          },
          "workerPayGroupId": {
            "type": "string",
            "description": "The WorkerPayGroup that was used to generate the list of workers for this PayrollRun preview."
          },
          "workerPayments": {
            "type": "array",
            "description": "WorkerPayments for each worker included in this PayrollRun preview.",
            "items": {
              "$ref": "#/components/schemas/WorkerPayment"
            }
          }
        },
        "required": ["alerts", "employerId", "payPeriod", "workerPayments"]
      },
      "PayrollRunPreviewFromPayGroupInput": {
        "type": "object",
        "description": "Creates a PayrollRun preview for the workers included in the PayGroup.",
        "properties": {
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriodInput"
          },
          "type": {
            "type": "string",
            "default": "PayrollRunPreviewFromPayGroupInput",
            "description": "Input type."
          },
          "workerPayGroupId": {
            "type": "string",
            "description": "Id of the WorkerPayGroup."
          }
        },
        "required": ["payPeriod", "type", "workerPayGroupId"],
        "title": "Create PayrollRun preview from PayGroup"
      },
      "PayrollRunPreviewFromWorkerListInput": {
        "type": "object",
        "description": "Creates a PayrollRun Preview for the worker Ids provided.",
        "properties": {
          "payPeriod": {
            "$ref": "#/components/schemas/PayPeriodInput"
          },
          "type": {
            "type": "string",
            "default": "PayrollRunPreviewFromWorkerListInput",
            "description": "Input type."
          },
          "workerIds": {
            "type": "array",
            "description": "List of Worker Ids to calculate in the PayrollRun Preview.",
            "items": {
              "type": "string",
              "description": "List of Worker Ids to calculate in the PayrollRun Preview."
            }
          }
        },
        "required": ["payPeriod", "type", "workerIds"],
        "title": "Create PayrollRun Preview from a list of Workers"
      },
      "PayrollRunPreviewRestInput": {
        "type": "object",
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "required": ["type"]
      },
      "PayrollRunState": {
        "type": "object",
        "description": "Represents the current state of a PayrollRun.",
        "properties": {
          "lifecycleStatus": {
            "$ref": "#/components/schemas/PayrollRunLifecycleStatus"
          },
          "moneyMovementDetails": {
            "$ref": "#/components/schemas/PayrollRunStateDetails"
          },
          "payrollRunId": {
            "type": "string",
            "description": "The unique identifier for the PayrollRun."
          }
        },
        "required": ["lifecycleStatus", "payrollRunId"]
      },
      "PayrollRunStateDetails": {
        "type": "object",
        "description": "Represents the detailed state of a PayrollRun.",
        "properties": {
          "disbursementStateByWorker": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MoneyMovementDisbursementStatus"
            },
            "description": "The status of the disbursement for each worker in this PayrollRun."
          },
          "employerFundingStatus": {
            "$ref": "#/components/schemas/MoneyMovementEmployerFundingStatus"
          },
          "paymentStatus": {
            "$ref": "#/components/schemas/MoneyMovementPaymentStatus"
          }
        },
        "required": [
          "disbursementStateByWorker",
          "employerFundingStatus",
          "paymentStatus"
        ]
      },
      "PayrollRunStatus": {
        "type": "string",
        "description": "The PayrollRun state reflects whether it is ongoing or already confirmed; once confirmed, it initiates payment orders and becomes unmodifiable.",
        "enum": ["CONFIRMED", "PENDING", "PROCESSED"]
      },
      "PayrollRunTotals": {
        "type": "object",
        "description": "Summary of the total cost of a PayrollRun.",
        "properties": {
          "payrollCost": {
            "type": "string",
            "format": "money",
            "description": "Total amount to be paid to workers.",
            "example": "100.21"
          },
          "toBeDebited": {
            "type": "string",
            "format": "money",
            "description": "Total amount that will leave the employer's bank account.",
            "example": "100.21"
          }
        }
      },
      "PaystreamCompensationItem": {
        "type": "object",
        "properties": {
          "compensationReferenceId": {
            "type": "string",
            "description": "The compensation reference Id defines the compensation type and the taxation rules.  When you are onboarded, you will receive your compensation references which will work across Sandbox and Production. Let us know if you have questions about your configured compensations."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the Compensation Item."
          },
          "workerId": {
            "type": "string",
            "description": "The unique identifier for the Worker."
          }
        },
        "required": ["id"]
      },
      "PaystreamCompensationItemInput": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaystreamItemRestInput"
          },
          {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "format": "money",
                "description": "The fixed amount to be compensated regardless of hours worked, sales made etc. Common scenarios for fixed amount compensation include tips, bonuses, flat commissions, and salaries.",
                "example": "100.21"
              },
              "compensationReferenceId": {
                "type": "string",
                "description": "The compensation reference Id defines the compensation type and the taxation rules.  When you are onboarded, you will receive your compensation references which will work across Sandbox and Production. Let us know if you have questions about your configured compensations."
              },
              "endDate": {
                "type": "string",
                "format": "date",
                "description": "The end date of the compensation. Must be greater than or equal to the start date. In the case of a daily compensation amount the end date is the same as the start date. In the case of a frequency based compensation the end date should match with the end of the pay period.",
                "example": "2022-01-02"
              },
              "frequency": {
                "$ref": "#/components/schemas/FrequencyBasedFrequencyRestInput"
              },
              "hours": {
                "type": "string",
                "format": "number",
                "description": "The number of hours being compensated. When combined with the pay rate, this can be used to calculate the compensation amount to pay the Worker.",
                "example": "221.21"
              },
              "rate": {
                "type": "string",
                "format": "money",
                "description": "The rate of pay used for calculating a Worker's compensation.",
                "example": "100.21"
              },
              "startDate": {
                "type": "string",
                "format": "date",
                "description": "The start date of the compensation. In the case of a frequency based compensation the start date should match with the start of the pay period.",
                "example": "2022-01-02"
              },
              "type": {
                "type": "string",
                "default": "PaystreamCompensationItemInput",
                "description": "Input type."
              },
              "workerId": {
                "type": "string",
                "description": "The unique identifier for the Worker."
              }
            }
          }
        ],
        "description": "The Compensation to be created by Paystream.",
        "required": [
          "compensationReferenceId",
          "endDate",
          "startDate",
          "type",
          "workerId"
        ],
        "title": "Create Compensation Input"
      },
      "PaystreamCompensationsInput": {
        "type": "object",
        "description": "The input batch containing the list of compensations to be created.",
        "properties": {
          "data": {
            "type": "array",
            "description": "The input compensation data to be processed by Paystream.",
            "items": {
              "$ref": "#/components/schemas/PaystreamCompensationItemInput"
            }
          }
        },
        "required": ["data"]
      },
      "PaystreamEmployer": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "description": "The unique identifier for the Employer Address.",
            "items": {
              "$ref": "#/components/schemas/PaystreamEmployerAddress"
            }
          },
          "bankAccount": {
            "$ref": "#/components/schemas/PaystreamEmployerBankAccount"
          },
          "externalId": {
            "type": "string",
            "description": "The Id used to represent the object in your system that is mapped to this Employer."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the Employer."
          },
          "termsOfService": {
            "$ref": "#/components/schemas/PaystreamEmployerTermsOfServiceAcceptance"
          }
        },
        "required": ["id"]
      },
      "PaystreamEmployerAddress": {
        "type": "object",
        "description": "The unique identifier for the Employer Address.",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "The Id used to represent the object in your system that is mapped to this address."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the Employer Bank Account."
          }
        },
        "required": ["id"]
      },
      "PaystreamEmployerAddressRestInput": {
        "type": "object",
        "description": "If defined, sets the filing address for the Employer.",
        "properties": {
          "addressLine1": {
            "type": "string",
            "description": "The first line of the Employer address.",
            "example": "123 Main St"
          },
          "addressLine2": {
            "type": "string",
            "description": "The second line of the Employer address, if required.",
            "example": "Suite 100"
          },
          "city": {
            "type": "string",
            "description": "The city/town portion of the Employer address.",
            "example": "San Francisco"
          },
          "countryISO": {
            "$ref": "#/components/schemas/CountryCodeISORestInput"
          },
          "externalId": {
            "type": "string",
            "description": "The Id used to represent the object in your system that is mapped to this address."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the Employer Bank Account."
          },
          "isDefaultWorkLocation": {
            "type": "boolean",
            "description": "Defines whether the address provided should be set as the default work location for the employer. All new workers will have this address set as their work location. If not provided, will default to false."
          },
          "isWorkLocation": {
            "type": "boolean",
            "description": "Defines whether the address provided is a physical location whereby work occurs. If not provided, will default to true."
          },
          "name": {
            "type": "string",
            "description": "The name to assign to the Employer address. This is an optional field, however can be useful to identify multiple office locations. If omitted, the first line of the address is used.",
            "example": "Golden Gate Innovations office"
          },
          "postalCode": {
            "type": "string",
            "description": "The zip code of the address. Supports both ZIP and ZIP+4.",
            "example": "94105"
          },
          "state": {
            "type": "string",
            "description": "The postal abbreviation of the state of the address. For US addresses, follows ISO 3166-2:US.",
            "example": "CA"
          }
        },
        "required": [
          "addressLine1",
          "addressLine2",
          "city",
          "countryISO",
          "isWorkLocation",
          "postalCode",
          "state"
        ]
      },
      "PaystreamEmployerBankAccount": {
        "type": "object",
        "description": "The bank account for the Employer that is used to pay Workers.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the Employer Bank Account."
          }
        },
        "required": ["id"]
      },
      "PaystreamEmployerBankAccountRestInput": {
        "type": "object",
        "description": "If defined, sets the bank account for the Employer that is used to pay Workers.",
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "The bank account number."
          },
          "accountType": {
            "$ref": "#/components/schemas/PaystreamRestBankAccountType"
          },
          "displayName": {
            "type": "string",
            "description": "User designated name for the bank account."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the Employer Bank Account."
          },
          "partyName": {
            "type": "string",
            "description": "Name of the party (person, business, etc) with ownership of the bank account. If left empty, will default to the business name."
          },
          "paymentAuthorization": {
            "$ref": "#/components/schemas/PaystreamPaymentAuthorization"
          },
          "routingNumber": {
            "type": "string",
            "description": "The bank account routing number."
          },
          "verification": {
            "$ref": "#/components/schemas/PaystreamEmployerBankAccountVerification"
          }
        },
        "required": ["accountNumber", "accountType", "routingNumber"]
      },
      "PaystreamEmployerBankAccountVerification": {
        "type": "object",
        "description": "The verification details for this employer bank account.",
        "properties": {
          "organizationVerifiedAt": {
            "type": "string",
            "format": "date-time",
            "description": "If the organization is verifying bank accounts outside of Salsa, this captures the date and time that the organization verified the employer bank account."
          }
        }
      },
      "PaystreamEmployerBusinessInfoRestInput": {
        "type": "object",
        "description": "The business information for the Employer, e.g. the business legal name.",
        "properties": {
          "businessName": {
            "type": "string",
            "description": "The legal name of the business. Required when creating an Employer",
            "example": "Golden Gate Innovations"
          },
          "country": {
            "$ref": "#/components/schemas/CountryCodeISORestInput"
          },
          "employerType": {
            "$ref": "#/components/schemas/PaystreamEmployerType"
          }
        },
        "required": ["country"]
      },
      "PaystreamEmployerSignatory": {
        "type": "object",
        "description": "The signatory is a person who signs a document on behalf of the Employer.",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The first name of the signatory."
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the signatory."
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number of the signatory."
          },
          "positionTitle": {
            "type": "string",
            "description": "The position the signatory holds within the company."
          }
        },
        "required": ["firstName", "lastName", "phoneNumber", "positionTitle"]
      },
      "PaystreamEmployerTermsOfServiceAcceptance": {
        "type": "object",
        "description": "The Employer Terms of Service acceptance set for the employer.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id linked to the Employer Terms of Service acceptance set for the employer."
          }
        },
        "required": ["id"]
      },
      "PaystreamEmployerTermsOfServiceAcceptanceRestInput": {
        "type": "object",
        "description": "The current status of the Terms of Service, reflects a one-time change that occurred on the given Datetime.",
        "properties": {
          "dateTime": {
            "type": "string",
            "format": "date-time",
            "description": "The Datetime when the Terms of Service status was modified."
          },
          "status": {
            "$ref": "#/components/schemas/PaystreamEmployerTermsOfServiceAcceptanceStatus"
          }
        },
        "required": ["dateTime", "status"]
      },
      "PaystreamEmployerTermsOfServiceAcceptanceStatus": {
        "type": "string",
        "description": "The Status of the acceptance of Salsa Terms of Service.",
        "enum": ["REJECTED", "ACCEPTED"]
      },
      "PaystreamEmployerType": {
        "type": "string",
        "description": "The business entity type of the employer which determines which income tax return forms will be filed. If not provided, defaults to BUSINESS.",
        "enum": ["BUSINESS", "HOUSEHOLD"]
      },
      "PaystreamEmployerUpsertInput": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaystreamItemRestInput"
          },
          {
            "type": "object",
            "properties": {
              "addresses": {
                "type": "array",
                "description": "If defined, sets the filing address for the Employer.",
                "items": {
                  "$ref": "#/components/schemas/PaystreamEmployerAddressRestInput"
                }
              },
              "bankAccount": {
                "$ref": "#/components/schemas/PaystreamEmployerBankAccountRestInput"
              },
              "businessInfo": {
                "$ref": "#/components/schemas/PaystreamEmployerBusinessInfoRestInput"
              },
              "externalId": {
                "type": "string",
                "description": "The Id used to represent the object in your system that is mapped to this Employer."
              },
              "id": {
                "type": "string",
                "description": "The unique identifier for the Employer."
              },
              "signatory": {
                "$ref": "#/components/schemas/PaystreamEmployerSignatory"
              },
              "termOfServiceAcceptance": {
                "$ref": "#/components/schemas/PaystreamEmployerTermsOfServiceAcceptanceRestInput"
              },
              "type": {
                "type": "string",
                "default": "PaystreamEmployerUpsertInput",
                "description": "Input type."
              }
            }
          }
        ],
        "description": "The Employer to be created or updated by Paystream.",
        "required": ["type"],
        "title": "Upsert Employer Input"
      },
      "PaystreamEmployersInput": {
        "type": "object",
        "description": "The input batch containing the list of employers to be created.",
        "properties": {
          "data": {
            "type": "array",
            "description": "The input employer data to be processed by Paystream.",
            "items": {
              "$ref": "#/components/schemas/PaystreamEmployerUpsertInput"
            }
          }
        },
        "required": ["data"]
      },
      "PaystreamInput": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "The input data to be processed by Paystream.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PaystreamCompensationItemInput"
                },
                {
                  "$ref": "#/components/schemas/PaystreamEmployerUpsertInput"
                },
                {
                  "$ref": "#/components/schemas/PaystreamWorkerCreateInput"
                },
                {
                  "$ref": "#/components/schemas/PaystreamWorkerUpdateInput"
                }
              ]
            }
          }
        },
        "required": ["data"]
      },
      "PaystreamItemRestDomain": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "itemInput": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaystreamCompensationItemInput"
              },
              {
                "$ref": "#/components/schemas/PaystreamEmployerUpsertInput"
              },
              {
                "$ref": "#/components/schemas/PaystreamWorkerCreateInput"
              },
              {
                "$ref": "#/components/schemas/PaystreamWorkerUpdateInput"
              }
            ]
          },
          "partnerId": {
            "type": "string"
          },
          "paystreamItemId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/PaystreamItemStatusRestDomain"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "createdAt",
          "itemInput",
          "partnerId",
          "paystreamItemId",
          "status",
          "updatedAt"
        ]
      },
      "PaystreamItemRestInput": {
        "type": "object",
        "description": "The input data to be processed by Paystream.",
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "required": ["type"]
      },
      "PaystreamItemStatusRestDomain": {
        "type": "string",
        "enum": ["QUEUED", "IN_PROGRESS", "PROCESSED"]
      },
      "PaystreamPaymentAuthorization": {
        "type": "object",
        "description": "Represents the payment authorization for this employer allowing Salsa to debit the specified bank account to be able to process payroll.",
        "properties": {
          "acceptedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time that the payment authorization was accepted."
          }
        },
        "required": ["acceptedAt"]
      },
      "PaystreamRestApiEnvelopeListPaystreamCompensationItem": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaystreamCompensationItem"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorRestResponse"
            }
          }
        }
      },
      "PaystreamRestApiEnvelopeListPaystreamEmployer": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaystreamEmployer"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorRestResponse"
            }
          }
        }
      },
      "PaystreamRestApiEnvelopeListPaystreamItemRestDomain": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaystreamItemRestDomain"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorRestResponse"
            }
          }
        }
      },
      "PaystreamRestApiEnvelopeListPaystreamWorker": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaystreamWorker"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorRestResponse"
            }
          }
        }
      },
      "PaystreamRestBankAccountType": {
        "type": "string",
        "description": "Specifies whether the bank account is checking or savings.",
        "enum": ["CHECKING", "SAVINGS"]
      },
      "PaystreamWorker": {
        "type": "object",
        "properties": {
          "bankAccount": {
            "$ref": "#/components/schemas/PaystreamWorkerBankAccount"
          },
          "externalId": {
            "type": "string",
            "description": "The Id used to represent the object in your system that is mapped to this Worker."
          },
          "workerContract": {
            "$ref": "#/components/schemas/PaystreamWorkerContractRestDomain"
          },
          "workerId": {
            "type": "string",
            "description": "The unique identifier for the Worker."
          }
        },
        "required": ["workerId"]
      },
      "PaystreamWorkerAddressRestInput": {
        "type": "object",
        "description": "The home address of the Worker.",
        "properties": {
          "addressLine1": {
            "type": "string",
            "description": "The first line of the Worker address.",
            "example": "1234 Main St"
          },
          "addressLine2": {
            "type": "string",
            "description": "The second line of the Worker address, if required.",
            "example": "Apt 999"
          },
          "city": {
            "type": "string",
            "description": "The first line of the Worker address.",
            "example": "Beverly Hills"
          },
          "countryISO": {
            "$ref": "#/components/schemas/CountryCodeISORestInput"
          },
          "name": {
            "type": "string",
            "description": "The name to assign to the Worker address. This can be useful to identify multiple address locations. If omitted, this will default to 'Home'.",
            "example": "Jon Doe's Home"
          },
          "postalCode": {
            "type": "string",
            "description": "The zip code of the address. Supports both ZIP and ZIP+4.",
            "example": "94105"
          },
          "state": {
            "type": "string",
            "description": "The postal abbreviation of the state of the address. For US addresses, follows ISO 3166-2:US.",
            "example": "CA"
          }
        },
        "required": [
          "addressLine1",
          "city",
          "countryISO",
          "name",
          "postalCode",
          "state"
        ]
      },
      "PaystreamWorkerBankAccount": {
        "type": "object",
        "description": "The bank account for the Worker to receive payments from the Employer.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the Worker Bank Account."
          }
        },
        "required": ["id"]
      },
      "PaystreamWorkerBankAccountRestInput": {
        "type": "object",
        "description": "If defined, sets the bank account for the Worker to receive payments from the Employer.",
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "The bank account number."
          },
          "accountType": {
            "$ref": "#/components/schemas/PaystreamRestBankAccountType"
          },
          "displayName": {
            "type": "string",
            "description": "User designated name for the bank account."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the Worker Bank Account."
          },
          "partyName": {
            "type": "string",
            "description": "Name of the party (person, business, etc) with ownership of the bank account. If left empty, will default to the business name."
          },
          "routingNumber": {
            "type": "string",
            "description": "The bank account routing number."
          }
        },
        "required": ["accountNumber", "accountType", "routingNumber"]
      },
      "PaystreamWorkerContractRestDomain": {
        "type": "object",
        "description": "The bank account for the Worker to receive payments from the Employer.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the Worker Contract."
          }
        },
        "required": ["id"]
      },
      "PaystreamWorkerContractRestInput": {
        "type": "object",
        "description": "The employment contract describing the Worker classification, effective date, overtime eligibility and hire date. This is only consumed when creating a worker contract for the first time, otherwise an error will be returned. In order to make changes on an existing Worker Contract, please refer to the Worker Contract API.",
        "properties": {
          "classification": {
            "$ref": "#/components/schemas/WorkerClassificationRestInput"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date",
            "description": "The date this contract is effective."
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "The date the Worker contract has ended."
          },
          "hireDate": {
            "type": "string",
            "format": "date",
            "description": "The date the Worker was hired for this contract."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the Worker Contract."
          },
          "overtimeEligible": {
            "type": "boolean",
            "description": "Flag indicating whether the worker is eligible for overtime."
          }
        },
        "required": ["classification"]
      },
      "PaystreamWorkerCreateInput": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaystreamItemRestInput"
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/PaystreamWorkerAddressRestInput"
              },
              "displayName": {
                "type": "string",
                "description": "The display name to be shown within the payroll application. This is optional - if it is omitted it will default to a combination of the first and last names provided.",
                "example": "Jon Doe"
              },
              "employerId": {
                "type": "string",
                "description": "The unique identifier of the Employer that this Worker belongs to."
              },
              "externalId": {
                "type": "string",
                "description": "The Id used to represent the object in your system that is mapped to this Worker."
              },
              "firstName": {
                "type": "string",
                "description": "The legal first name of the Worker. This is optional however if provided requires the last name to also be set.",
                "example": "Jon"
              },
              "lastName": {
                "type": "string",
                "description": "The legal last name of the Worker. This is optional however if provided requires the first name to also be set.",
                "example": "Doe"
              },
              "middleName": {
                "type": "string",
                "description": "The legal middle name of the Worker.",
                "example": "Adam"
              },
              "type": {
                "type": "string",
                "default": "PaystreamWorkerCreateInput",
                "description": "Input type."
              },
              "workerClassification": {
                "$ref": "#/components/schemas/WorkerClassificationRestInput"
              }
            }
          }
        ],
        "description": "The Worker to be created by Paystream.",
        "required": ["employerId", "type", "workerClassification"],
        "title": "Create Worker Input"
      },
      "PaystreamWorkerItemRestInput": {
        "type": "object",
        "description": "The input worker data to be processed by Paystream.",
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "required": ["type"]
      },
      "PaystreamWorkerPersonalInfoRestInput": {
        "type": "object",
        "description": "If defined, sets the personal information for the Worker, such as email, birth date, etc.",
        "properties": {
          "birthDate": {
            "type": "string",
            "format": "date",
            "description": "The birth date of the Worker."
          },
          "email": {
            "type": "string",
            "description": "The email of the Worker."
          }
        }
      },
      "PaystreamWorkerUpdateInput": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaystreamItemRestInput"
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/PaystreamWorkerAddressRestInput"
              },
              "displayName": {
                "type": "string",
                "description": "The display name to be shown within the payroll application. This is optional - if it is omitted it will default to a combination of the first and last names provided.",
                "example": "Jon Doe"
              },
              "externalId": {
                "type": "string",
                "description": "The Id used to represent the object in your system that is mapped to this Worker."
              },
              "firstName": {
                "type": "string",
                "description": "The legal first name of the Worker. This is optional however if provided requires the last name to also be set.",
                "example": "Jon"
              },
              "lastName": {
                "type": "string",
                "description": "The legal last name of the Worker. This is optional however if provided requires the first name to also be set.",
                "example": "Doe"
              },
              "middleName": {
                "type": "string",
                "description": "The legal middle name of the Worker.",
                "example": "Adam"
              },
              "type": {
                "type": "string",
                "default": "PaystreamWorkerUpdateInput",
                "description": "Input type."
              },
              "workerId": {
                "type": "string",
                "description": "The unique identifier for the Worker."
              }
            }
          }
        ],
        "description": "The Worker to be updated by Paystream.",
        "required": ["type", "workerId"],
        "title": "Update Worker Input"
      },
      "PaystreamWorkerUpsertInput": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaystreamWorkerItemRestInput"
          },
          {
            "type": "object",
            "properties": {
              "bankAccount": {
                "$ref": "#/components/schemas/PaystreamWorkerBankAccountRestInput"
              },
              "contract": {
                "$ref": "#/components/schemas/PaystreamWorkerContractRestInput"
              },
              "displayName": {
                "type": "string",
                "description": "The display name to be shown within the payroll application. This is optional - if it is omitted it will default to a combination of the first and last names provided.",
                "example": "Jon Doe"
              },
              "employerId": {
                "type": "string",
                "description": "The unique identifier of the Employer that this Worker belongs to."
              },
              "externalId": {
                "type": "string",
                "description": "The Id used to represent the object in your system that is mapped to this Worker."
              },
              "firstName": {
                "type": "string",
                "description": "The legal first name of the Worker. This is optional however if provided requires the last name to also be set.",
                "example": "Jon"
              },
              "homeAddress": {
                "$ref": "#/components/schemas/PaystreamWorkerAddressRestInput"
              },
              "id": {
                "type": "string",
                "description": "The unique identifier for the Worker."
              },
              "lastName": {
                "type": "string",
                "description": "The legal last name of the Worker. This is optional however if provided requires the first name to also be set.",
                "example": "Doe"
              },
              "middleName": {
                "type": "string",
                "description": "The legal middle name of the Worker.",
                "example": "Adam"
              },
              "personalInfo": {
                "$ref": "#/components/schemas/PaystreamWorkerPersonalInfoRestInput"
              },
              "type": {
                "type": "string",
                "default": "PaystreamWorkerUpsertInput",
                "description": "Input type."
              }
            }
          }
        ],
        "description": "The Worker to be created or updated by Paystream.",
        "required": ["employerId", "type"],
        "title": "Upsert Worker Input"
      },
      "PaystreamWorkersInput": {
        "type": "object",
        "description": "The input batch containing the list of workers to be created.",
        "properties": {
          "data": {
            "type": "array",
            "description": "The input worker data to be processed by Paystream.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PaystreamWorkerCreateInput"
                },
                {
                  "$ref": "#/components/schemas/PaystreamWorkerUpsertInput"
                }
              ]
            }
          }
        },
        "required": ["data"]
      },
      "RateBasedAmount": {
        "type": "object",
        "properties": {
          "multiplier": {
            "type": "string",
            "format": "number",
            "description": "This amount will be multiplied by the rate to increase the cost per unit.",
            "example": "221.21"
          },
          "rate": {
            "type": "string",
            "format": "money",
            "description": "The cost of one unit.",
            "example": "100.21"
          },
          "type": {
            "type": "string",
            "default": "RATE",
            "description": "Amount type"
          },
          "unit": {
            "$ref": "#/components/schemas/UnitRestDomain"
          },
          "unitAmount": {
            "type": "string",
            "format": "number",
            "description": "Amount of units.",
            "example": "221.21"
          }
        },
        "required": ["rate", "type", "unit", "unitAmount"],
        "title": "Rate based amount"
      },
      "ReadinessRequirement": {
        "type": "object",
        "description": "List of Requirements that are pending to be completed for this Worker.",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of this Requirement."
          }
        },
        "required": ["description"]
      },
      "RelativeMonth": {
        "type": "string",
        "description": "Indicates the relationship between the pay day and the end of the pay period.",
        "enum": ["BEFORE", "SAME", "AFTER"]
      },
      "RestApiEnvelopeApiToken": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApiToken"
          }
        }
      },
      "RestApiEnvelopeDocument": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Document"
          }
        }
      },
      "RestApiEnvelopeDocumentLink": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DocumentLink"
          }
        }
      },
      "RestApiEnvelopeEmployer": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Employer"
          }
        }
      },
      "RestApiEnvelopeEmployerCapabilities": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EmployerCapabilities"
          }
        }
      },
      "RestApiEnvelopeEmployerWorkLocation": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EmployerWorkLocation"
          }
        }
      },
      "RestApiEnvelopeHostedEmployerOnboarding": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/HostedEmployerOnboarding"
          }
        }
      },
      "RestApiEnvelopeHostedWorkerOnboarding": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/HostedWorkerOnboarding"
          }
        }
      },
      "RestApiEnvelopeListEmployer": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Employer"
            }
          }
        }
      },
      "RestApiEnvelopeListEmployerWorkLocation": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployerWorkLocation"
            }
          }
        }
      },
      "RestApiEnvelopeListMockOnboardingWorker": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MockOnboardingWorker"
            }
          }
        }
      },
      "RestApiEnvelopeListOrganizationCompensationPolicy": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationCompensationPolicy"
            }
          }
        }
      },
      "RestApiEnvelopeListPayrollRun": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayrollRun"
            }
          }
        }
      },
      "RestApiEnvelopeListWebhookEndpoint": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookEndpoint"
            }
          }
        }
      },
      "RestApiEnvelopeListWorker": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Worker"
            }
          }
        }
      },
      "RestApiEnvelopeListWorkerPayGroup": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkerPayGroup"
            }
          }
        }
      },
      "RestApiEnvelopeListWorkerPayment": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkerPayment"
            }
          }
        }
      },
      "RestApiEnvelopeListWorkerPaymentCompensation": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkerPaymentCompensation"
            }
          }
        }
      },
      "RestApiEnvelopeListWorkerPaymentDeduction": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkerPaymentDeduction"
            }
          }
        }
      },
      "RestApiEnvelopeListWorkerPaymentRecord": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkerPaymentRecord"
            }
          }
        }
      },
      "RestApiEnvelopeListWorkerWorkLocationAssignment": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkerWorkLocationAssignment"
            }
          }
        }
      },
      "RestApiEnvelopeMockOnboardingEmployer": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MockOnboardingEmployer"
          }
        }
      },
      "RestApiEnvelopeOrganizationCompensationPolicy": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OrganizationCompensationPolicy"
          }
        }
      },
      "RestApiEnvelopePayrollRun": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PayrollRun"
          }
        }
      },
      "RestApiEnvelopePayrollRunPreview": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PayrollRunPreview"
          }
        }
      },
      "RestApiEnvelopePayrollRunState": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PayrollRunState"
          }
        }
      },
      "RestApiEnvelopeWebhookEndpoint": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WebhookEndpoint"
          }
        }
      },
      "RestApiEnvelopeWorker": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Worker"
          }
        }
      },
      "RestApiEnvelopeWorkerCapabilities": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkerCapabilities"
          }
        }
      },
      "RestApiEnvelopeWorkerContract": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkerContract"
          }
        }
      },
      "RestApiEnvelopeWorkerPayGroup": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkerPayGroup"
          }
        }
      },
      "RestApiEnvelopeWorkerPayment": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkerPayment"
          }
        }
      },
      "RestApiEnvelopeWorkerPaymentRecord": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkerPaymentRecord"
          }
        }
      },
      "RestApiEnvelopeWorkerTermination": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkerTermination"
          }
        }
      },
      "RestApiEnvelopeWorkerWorkLocationAssignment": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WorkerWorkLocationAssignment"
          }
        }
      },
      "SemiMonthlyAbsolutePayScheduleDefinition": {
        "type": "object",
        "description": "Defines a PaySchedule with two periods in a month. Each period is configured as fixed days in the month.",
        "properties": {
          "firstPeriodDefinition": {
            "$ref": "#/components/schemas/MonthlyAbsolutePeriodDefinition"
          },
          "frequency": {
            "$ref": "#/components/schemas/PayScheduleFrequency"
          },
          "secondPeriodDefinition": {
            "$ref": "#/components/schemas/MonthlyAbsolutePeriodDefinition"
          },
          "type": {
            "type": "string",
            "description": "Definition type"
          }
        },
        "required": [
          "firstPeriodDefinition",
          "frequency",
          "secondPeriodDefinition",
          "type"
        ]
      },
      "SemiMonthlyRelativePayScheduleDefinition": {
        "type": "object",
        "description": "Defines a PaySchedule with two periods in a month. Each period is configured with a relative days from the pay day.",
        "properties": {
          "firstPeriodDefinition": {
            "$ref": "#/components/schemas/MonthlyRelativePeriodDefinition"
          },
          "frequency": {
            "$ref": "#/components/schemas/PayScheduleFrequency"
          },
          "secondPeriodDefinition": {
            "$ref": "#/components/schemas/MonthlyRelativePeriodDefinition"
          },
          "type": {
            "type": "string",
            "description": "Definition type"
          }
        },
        "required": [
          "firstPeriodDefinition",
          "frequency",
          "secondPeriodDefinition",
          "type"
        ]
      },
      "SupportedCountry": {
        "type": "string",
        "description": "The primary country in which this employer runs payroll.",
        "enum": ["USA", "CAN"],
        "example": "USA"
      },
      "TermsOfServiceAcceptance": {
        "type": "object",
        "description": "The current status of the Terms of Service, reflects a one-time change that occurred on the given Datetime.",
        "properties": {
          "dateTime": {
            "type": "string",
            "format": "date-time",
            "description": "The Datetime when the Terms of Service status was modified."
          },
          "status": {
            "$ref": "#/components/schemas/TermsOfServiceAcceptanceStatus"
          }
        }
      },
      "TermsOfServiceAcceptanceRestInput": {
        "type": "object",
        "properties": {
          "dateTime": {
            "type": "string",
            "format": "date-time",
            "description": "The Datetime when the Terms of Service status was modified."
          },
          "status": {
            "$ref": "#/components/schemas/TermsOfServiceAcceptanceStatus"
          }
        },
        "required": ["dateTime", "status"]
      },
      "TermsOfServiceAcceptanceStatus": {
        "type": "string",
        "description": "The Status of the acceptance of Salsa Terms of Service.",
        "enum": ["REJECTED", "ACCEPTED"]
      },
      "UnitRestDomain": {
        "type": "string",
        "description": "The name of the unit.",
        "enum": ["HOURS", "ITEMS"],
        "example": "HOURS"
      },
      "UpdateEmployerInput": {
        "type": "object",
        "properties": {
          "businessName": {
            "type": "string",
            "description": "The name of the business.",
            "example": "Acme Solutions"
          },
          "country": {
            "$ref": "#/components/schemas/SupportedCountry"
          },
          "employerType": {
            "$ref": "#/components/schemas/EmployerType"
          },
          "externalId": {
            "type": "string",
            "description": "The Id used to represent the object in your system that is mapped to this Employer."
          },
          "legalName": {
            "type": "string",
            "description": "The legal name of the business.",
            "example": "Acme Solutions Inc."
          }
        },
        "required": ["businessName"]
      },
      "UpdatePaymentRecordCompensationInput": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRecordCompensationInput"
          },
          {
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/Amount"
              },
              "id": {
                "type": "string",
                "description": "The Id of the PaymentRecordCompensation to be updated.",
                "example": "payruncomp_1"
              },
              "operation": {
                "type": "string",
                "default": "UpdatePaymentRecordCompensationInput",
                "description": "Operation"
              }
            }
          }
        ],
        "description": "Values to update an existing PaymentRecordCompensation.",
        "required": ["amount", "id", "operation"],
        "title": "Update PaymentRecordCompensation"
      },
      "UpdatePaymentRecordDeductionInput": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRecordDeductionInput"
          },
          {
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/Amount"
              },
              "id": {
                "type": "string",
                "description": "The Id of the PaymentRecordDeduction to be updated.",
                "example": "payrunded_1"
              },
              "operation": {
                "type": "string",
                "default": "UpdatePaymentRecordDeductionInput",
                "description": "Operation"
              }
            }
          }
        ],
        "description": "Values to update an existing PaymentRecordDeduction.",
        "required": ["amount", "id", "operation"],
        "title": "Update PaymentRecordDeduction"
      },
      "UpdateWebhookEndpointRestInput": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Descriptive text for the WebhookEndpoint."
          },
          "endpointUrl": {
            "type": "string",
            "description": "Your Endpoint URL that will receive events from Salsa about your application."
          },
          "status": {
            "$ref": "#/components/schemas/WebhookEndpointStatusRestDomain"
          },
          "webhookVersion": {
            "type": "string",
            "description": "Schema version of the WebhookEndpoint."
          }
        },
        "required": ["description", "endpointUrl", "status", "webhookVersion"]
      },
      "UpdateWorkerContractInput": {
        "type": "object",
        "properties": {
          "classification": {
            "$ref": "#/components/schemas/WorkerClassification"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date",
            "description": "The date this WorkerContract is effective."
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "The last date this WorkerContract is effective."
          },
          "hireDate": {
            "type": "string",
            "format": "date",
            "description": "The date the Worker was hired."
          },
          "overtimeEligible": {
            "type": "boolean",
            "description": "Specifies whether the Worker is eligible for overtime payment."
          }
        }
      },
      "UpdateWorkerInput": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Name that will be used in the UI. When displayName is provided firstName and lastName are optional.",
            "example": "John Doe"
          },
          "employerSpecifiedIdentifier": {
            "type": "string",
            "description": "The Id used to represent the object by the Employer of this Worker."
          },
          "externalId": {
            "type": "string",
            "description": "The Id used to represent the object in your system that is mapped to this Worker."
          },
          "firstName": {
            "type": "string",
            "description": "First legal name of the Worker. When displayName is not provided this is required.",
            "example": "John"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the Worker."
          },
          "lastName": {
            "type": "string",
            "description": "Last legal name of the Worker. When displayName is not provided this is required.",
            "example": "Doe"
          },
          "middleName": {
            "type": "string",
            "description": "Middle legal name of the Worker.",
            "example": "Adam"
          }
        },
        "required": ["id"]
      },
      "WarningPayrollRunAlert": {
        "type": "object",
        "description": "Important information that informs about important situations that deviates from the common path. It does not blocks confirming the PayrollRun",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying this alert."
          },
          "message": {
            "type": "string",
            "description": "Detailed message explaining the purpose of this alert."
          }
        },
        "required": ["code", "message"],
        "title": "Warning alert"
      },
      "WebhookEndpoint": {
        "type": "object",
        "description": "A WebhookEndpoint contains an endpoint URL that will receive Salsa webhook events in your system.",
        "properties": {
          "description": {
            "type": "string",
            "description": "Descriptive text for the WebhookEndpoint."
          },
          "endpointUrl": {
            "type": "string",
            "description": "Your Endpoint URL that will receive events from Salsa about your application."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the WebhookEndpoint."
          },
          "signatureSecret": {
            "type": "string",
            "description": "Private key used to verify the webhook event signature header sent by Salsa. Only available during create operation. Verifying the Webhook-Signature header is highly recommended."
          },
          "status": {
            "$ref": "#/components/schemas/WebhookEndpointStatusRestDomain"
          },
          "webhookVersion": {
            "type": "string",
            "description": "Schema version of the WebhookEndpoint."
          }
        },
        "required": ["description", "endpointUrl", "id", "status"]
      },
      "WebhookEndpointStatusRestDomain": {
        "type": "string",
        "description": "Represents if Salsa should send events to this WebhookEndpoint.",
        "enum": ["ENABLED", "DISABLED"]
      },
      "WebhookEventAttributesSchema": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/EmployerCreatedEvent"
          },
          {
            "$ref": "#/components/schemas/EmployerUpdatedEvent"
          },
          {
            "$ref": "#/components/schemas/EmployerOnboardingStatusEvent"
          },
          {
            "$ref": "#/components/schemas/EmployerAccountStandingStatusChangedEvent"
          },
          {
            "$ref": "#/components/schemas/EmployerPayWorkersReadinessStatusChangedEvent"
          },
          {
            "$ref": "#/components/schemas/WorkerCreatedEvent"
          },
          {
            "$ref": "#/components/schemas/WorkerUpdatedEvent"
          },
          {
            "$ref": "#/components/schemas/PayrollRunAwaitingInputEvent"
          },
          {
            "$ref": "#/components/schemas/NotificationEmployerPayrollRunConfirmationEvent"
          },
          {
            "$ref": "#/components/schemas/NotificationEmployerPaydayReminderEvent"
          },
          {
            "$ref": "#/components/schemas/NotificationWorkerPaydayEvent"
          },
          {
            "$ref": "#/components/schemas/WorkerOnboardingStatusEvent"
          }
        ]
      },
      "WebhookEventObject": {
        "type": "object",
        "discriminator": {
          "mapping": {
            "Employer.AccountStanding.statusChanged": "#/components/schemas/EmployerAccountStandingStatusChangedEvent",
            "Employer.PayWorkersReadiness.statusChanged": "#/components/schemas/EmployerPayWorkersReadinessStatusChangedEvent",
            "Employer.created": "#/components/schemas/EmployerCreatedEvent",
            "Employer.onboardingStatus": "#/components/schemas/EmployerOnboardingStatusEvent",
            "Employer.updated": "#/components/schemas/EmployerUpdatedEvent",
            "Notification.employerPaydayReminder": "#/components/schemas/NotificationEmployerPayrollRunConfirmationEvent",
            "Notification.employerPayrollRunConfirmation": "#/components/schemas/NotificationEmployerPaydayReminderEvent",
            "Notification.workerPayday": "#/components/schemas/NotificationWorkerPaydayEvent",
            "PayrollRun.awaitingInput": "#/components/schemas/PayrollRunAwaitingInputEvent",
            "Worker.PaymentsReadiness.statusChanged": "#/components/schemas/EmployerWorkerPaymentsReadinessStatusChangedEvent",
            "Worker.created": "#/components/schemas/WorkerCreatedEvent",
            "Worker.onboardingStatus": "#/components/schemas/WorkerOnboardingStatusEvent",
            "Worker.updated": "#/components/schemas/WorkerUpdatedEvent"
          },
          "propertyName": "type"
        },
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/WebhookEventAttributesSchema"
          },
          "type": {
            "type": "string",
            "enum": [
              "Employer.created",
              "Employer.updated",
              "Employer.onboardingStatus",
              "Employer.AccountStanding.statusChanged",
              "Employer.PayWorkersReadiness.statusChanged",
              "Notification.employerPaydayReminder",
              "Notification.employerPayrollRunConfirmation",
              "Notification.workerPayday",
              "PayrollRun.awaitingInput",
              "Worker.created",
              "Worker.onboardingStatus",
              "Worker.updated",
              "Worker.PaymentsReadiness.statusChanged"
            ]
          }
        },
        "required": ["attributes", "type"]
      },
      "WebhookRequestEnvelope": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WebhookEventObject"
          }
        },
        "required": ["data"]
      },
      "Worker": {
        "type": "object",
        "description": "Represents an individual employed by a company who receives compensation for their work",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Name that will be used in the UI. When displayName is provided firstName and lastName are optional.",
            "example": "John Doe"
          },
          "externalId": {
            "type": "string",
            "description": "The Id used to represent the object in your system that is mapped to this Worker."
          },
          "firstName": {
            "type": "string",
            "description": "First legal name of the Worker. When displayName is not provided this is required.",
            "example": "John"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the Worker."
          },
          "lastName": {
            "type": "string",
            "description": "Last legal name of the Worker. When displayName is not provided this is required.",
            "example": "Doe"
          },
          "middleName": {
            "type": "string",
            "description": "Middle legal name of the Worker.",
            "example": "Adam"
          }
        },
        "required": ["id"]
      },
      "WorkerCapabilities": {
        "type": "object",
        "description": "Holds the statuses of the operations a Worker is able to perform.",
        "properties": {
          "payments": {
            "$ref": "#/components/schemas/PaymentsReadiness"
          }
        },
        "required": ["payments"]
      },
      "WorkerClassification": {
        "type": "string",
        "description": "Specifies the relationship between the Worker and the business (Employer) for which the Worker is providing services. The Worker's relationship is classified as either being an employee or an independent contractor.",
        "enum": ["EMPLOYEE", "CONTRACTOR"]
      },
      "WorkerClassificationRestInput": {
        "type": "string",
        "description": "Indicates the classification of the Worker in relationship to the Employer. Different types, such as contractors and employees, are subject to distinct tax regulations.",
        "enum": ["EMPLOYEE", "CONTRACTOR"]
      },
      "WorkerContract": {
        "type": "object",
        "properties": {
          "classification": {
            "$ref": "#/components/schemas/WorkerClassification"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date",
            "description": "The date this WorkerContract is effective."
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "The last date this WorkerContract is effective."
          },
          "hireDate": {
            "type": "string",
            "format": "date",
            "description": "The date the Worker was hired."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for this WorkerContract."
          },
          "overtimeEligible": {
            "type": "boolean",
            "description": "Specifies whether the Worker is eligible for overtime payment."
          }
        },
        "required": ["effectiveDate", "id"]
      },
      "WorkerCreatedEvent": {
        "type": "object",
        "description": "Triggers `Worker.created` when a Worker is created.",
        "properties": {
          "employerId": {
            "type": "string",
            "description": "The unique identifier for the Employer of the Worker."
          },
          "externalId": {
            "type": "string",
            "description": "The Id used to represent the object in your system that is mapped to this Employer."
          },
          "workerId": {
            "type": "string",
            "description": "The unique identifier for the Worker that was created."
          }
        },
        "required": ["employerId", "workerId"],
        "title": "Worker created event"
      },
      "WorkerOnboardingStatusEvent": {
        "type": "object",
        "description": "Triggers `Worker.onboardingStatus` when a worker completes the onboarding form.",
        "properties": {
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the Worker completed the onboarding."
          },
          "employerId": {
            "type": "string",
            "description": "The unique identifier for the Employer for this Worker."
          },
          "hostedWorkerOnboardingId": {
            "type": "string",
            "description": "The unique identifier for the HostedWorkerOnboarding."
          },
          "status": {
            "type": "string",
            "description": "Represents the current onboarding stage for the Worker.",
            "enum": ["INVITED", "STARTED", "COMPLETED", "INVALIDATED"]
          },
          "workerId": {
            "type": "string",
            "description": "The unique identifier for the Worker."
          }
        },
        "required": [
          "employerId",
          "hostedWorkerOnboardingId",
          "status",
          "workerId"
        ],
        "title": "Worker onboarding status event"
      },
      "WorkerPayGroup": {
        "type": "object",
        "description": "Configuration for running payroll for a group of workers.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the WorkerPayGroup.",
            "example": "payrl_a9e..."
          },
          "isDefaultWorkerPayGroup": {
            "type": "boolean",
            "description": "Flag indicating whether this is the default worker pay group for the employer."
          },
          "name": {
            "type": "string",
            "description": "Name of the worker pay group."
          },
          "paySchedule": {
            "$ref": "#/components/schemas/PaySchedule"
          },
          "workerIds": {
            "type": "array",
            "description": "Workers that will be run as part of this worker pay group.",
            "items": {
              "type": "string",
              "description": "Workers that will be run as part of this worker pay group."
            }
          }
        },
        "required": ["id", "isDefaultWorkerPayGroup", "name", "workerIds"]
      },
      "WorkerPayment": {
        "type": "object",
        "description": "Represents a payment made to a worker in compensation for their work during the specified pay period.",
        "properties": {
          "alerts": {
            "$ref": "#/components/schemas/PayrollRunAlertsRestDomain"
          },
          "compensations": {
            "type": "array",
            "description": "Concepts for which the worker is being compensated in this PaymentRecord.",
            "items": {
              "$ref": "#/components/schemas/WorkerPaymentCompensation"
            }
          },
          "deductions": {
            "type": "array",
            "description": "Amounts deducted from the workers payment, excluding taxes.",
            "items": {
              "$ref": "#/components/schemas/WorkerPaymentDeduction"
            }
          },
          "grossPay": {
            "type": "string",
            "format": "money",
            "description": "The total compensation received by the worker.",
            "example": "100.21"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the WorkerPayment",
            "example": "wrrun_a9e..."
          },
          "netPay": {
            "type": "string",
            "format": "money",
            "description": "The total compensation received by the worker after all deductions.",
            "example": "100.21"
          },
          "payMethod": {
            "$ref": "#/components/schemas/PayMethodRestDomain"
          },
          "paymentRecord": {
            "type": "string",
            "description": "PaymentRecord generated for this WorkerPayment",
            "example": "ernrec_140..."
          },
          "status": {
            "$ref": "#/components/schemas/WorkerPaymentStatusRestDomain"
          },
          "taxContributions": {
            "type": "array",
            "description": "Taxes that the employer is contributing on behalf of the worker in this PaymentRecord.",
            "items": {
              "$ref": "#/components/schemas/WorkerPaymentTaxContribution"
            }
          },
          "taxDeductions": {
            "type": "array",
            "description": "Taxes deducted from the worker's gross in this PaymentRecord.",
            "items": {
              "$ref": "#/components/schemas/WorkerPaymentTaxDeduction"
            }
          },
          "totals": {
            "$ref": "#/components/schemas/WorkerTotals"
          },
          "workerId": {
            "type": "string",
            "description": "Id of the worker associated to this WorkerPayment.",
            "example": "wr_8d7..."
          }
        },
        "required": [
          "alerts",
          "compensations",
          "deductions",
          "grossPay",
          "netPay",
          "status",
          "taxContributions",
          "taxDeductions",
          "workerId"
        ]
      },
      "WorkerPaymentCompensation": {
        "type": "object",
        "description": "Represents a compensation received by the worker.",
        "properties": {
          "amount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FixedAmount"
              },
              {
                "$ref": "#/components/schemas/FrequencyBasedAmount"
              },
              {
                "$ref": "#/components/schemas/RateBasedAmount"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the WorkerPaymentCompensation.",
            "example": "payruncomp_78ce..."
          },
          "name": {
            "type": "string",
            "description": "Human readable description for the compensation."
          },
          "policy": {
            "type": "string",
            "description": "Id of the policy to which this compensation is associated with."
          }
        },
        "required": ["amount", "id", "name", "policy"]
      },
      "WorkerPaymentDeduction": {
        "type": "object",
        "properties": {
          "amount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FixedAmount"
              },
              {
                "$ref": "#/components/schemas/FrequencyBasedAmount"
              },
              {
                "$ref": "#/components/schemas/RateBasedAmount"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the WorkerPaymentDeduction.",
            "example": "payrunded_eb9..."
          },
          "name": {
            "type": "string",
            "description": "Human readable description for the deduction."
          },
          "policy": {
            "type": "string",
            "description": "Policy to which this deduction is attached."
          }
        },
        "required": ["amount", "id", "name", "policy"]
      },
      "WorkerPaymentRecord": {
        "type": "object",
        "description": "This is the paycheck given to the worker by their employer, detailing the individual's earnings, deductions, and contributions for a specific pay period.",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/WorkerPaymentRecordCategory"
          },
          "compensations": {
            "type": "array",
            "description": "Concepts for which the worker is being compensated in this WorkerPaymentRecord.",
            "items": {
              "$ref": "#/components/schemas/WorkerPaymentRecordCompensation"
            }
          },
          "deductions": {
            "type": "array",
            "description": "Amounts deducted from the workers payment, excluding taxes.",
            "items": {
              "$ref": "#/components/schemas/WorkerPaymentRecordDeduction"
            }
          },
          "document": {
            "type": "string",
            "description": "The unique identifier for the PDF Document that represents this WorkerPaymentRecord.",
            "example": "doc_123..."
          },
          "employerDetails": {
            "$ref": "#/components/schemas/WorkerPaymentRecordEmployerDetails"
          },
          "grossPay": {
            "type": "string",
            "format": "money",
            "description": "The total compensation received by the worker.",
            "example": "100.21"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the WorkerPaymentRecord.",
            "example": "ernrec_a6e..."
          },
          "netPay": {
            "type": "string",
            "format": "money",
            "description": "The total compensation received by the worker after all deductions.",
            "example": "100.21"
          },
          "payDate": {
            "type": "string",
            "format": "date",
            "description": "The date when the payment, representing the amount due, will be issued to the worker."
          },
          "payMethod": {
            "$ref": "#/components/schemas/WorkerPaymentRecordPayMethod"
          },
          "payPeriod": {
            "$ref": "#/components/schemas/WorkerPaymentRecordPayPeriod"
          },
          "payrollCost": {
            "type": "string",
            "format": "money",
            "description": "The total cost incurred by the employer for this worker's payroll.",
            "example": "100.21"
          },
          "status": {
            "$ref": "#/components/schemas/WorkerPaymentRecordStatus"
          },
          "taxContributions": {
            "type": "array",
            "description": "Taxes that the employer is contributing on behalf of the worker in this WorkerPaymentRecord.",
            "items": {
              "$ref": "#/components/schemas/WorkerPaymentRecordTaxContribution"
            }
          },
          "taxDeductions": {
            "type": "array",
            "description": "Taxes deducted from the worker's gross in this WorkerPaymentRecord.",
            "items": {
              "$ref": "#/components/schemas/WorkerPaymentRecordTaxDeduction"
            }
          },
          "totals": {
            "$ref": "#/components/schemas/WorkerPaymentRecordPeriodTotals"
          },
          "workTime": {
            "$ref": "#/components/schemas/WorkerPaymentRecordWorkTime"
          },
          "workerDetails": {
            "$ref": "#/components/schemas/WorkerPaymentRecordWorkerDetails"
          }
        },
        "required": [
          "category",
          "compensations",
          "deductions",
          "employerDetails",
          "grossPay",
          "id",
          "netPay",
          "payDate",
          "payMethod",
          "payPeriod",
          "payrollCost",
          "status",
          "taxContributions",
          "taxDeductions",
          "totals",
          "workTime",
          "workerDetails"
        ]
      },
      "WorkerPaymentRecordAddress": {
        "type": "object",
        "description": "Worker's main address",
        "properties": {
          "addressLine1": {
            "type": "string",
            "description": "The first line of the address."
          },
          "addressLine2": {
            "type": "string",
            "description": "The second line of the address."
          },
          "administrativeArea": {
            "type": "string"
          },
          "country": {
            "type": "string",
            "description": "The country of the address."
          },
          "locality": {
            "type": "string"
          },
          "postalCode": {
            "type": "string",
            "description": "The zip code of the address. Supports both ZIP and ZIP+4."
          }
        },
        "required": [
          "addressLine1",
          "addressLine2",
          "administrativeArea",
          "country",
          "locality",
          "postalCode"
        ]
      },
      "WorkerPaymentRecordAmount": {
        "type": "object",
        "description": "A WorkerPaymentRecord total amount.",
        "properties": {
          "amount": {
            "type": "string",
            "format": "money",
            "description": "The amount for the current pay period.",
            "example": "100.21"
          },
          "ytdAmount": {
            "type": "string",
            "format": "money",
            "description": "The accumulated amount since the beginning of the fiscal year until now.",
            "example": "100.21"
          }
        },
        "required": ["amount", "ytdAmount"]
      },
      "WorkerPaymentRecordCategory": {
        "type": "string",
        "description": "Represents the type of worker associated to this WorkerPaymentRecord. While they are similar, a WorkerPaymentRecord for a contractor contains fewer details than the worker's WorkerPaymentRecord (e.g., no taxes calculated).",
        "enum": ["EMPLOYEE", "CONTRACTOR"]
      },
      "WorkerPaymentRecordCompensation": {
        "type": "object",
        "description": "Accumulated amount for a compensation in the WorkerPaymentRecord.",
        "properties": {
          "amount": {
            "type": "string",
            "format": "money",
            "description": "The amount of the compensation.",
            "example": "100.21"
          },
          "description": {
            "type": "string",
            "description": "The description of the compensation."
          },
          "ytdAmount": {
            "type": "string",
            "format": "money",
            "description": "The accumulated amount of this compensation since the beginning of the fiscal year unit now.",
            "example": "100.21"
          }
        },
        "required": ["amount", "description", "ytdAmount"]
      },
      "WorkerPaymentRecordDeduction": {
        "type": "object",
        "description": "Accumulated amount for a deduction in the WorkerPaymentRecord.",
        "properties": {
          "amount": {
            "type": "string",
            "format": "money",
            "description": "The amount of the deduction.",
            "example": "100.21"
          },
          "description": {
            "type": "string",
            "description": "The description of the deduction."
          },
          "ytdAmount": {
            "type": "string",
            "format": "money",
            "description": "The accumulated amount of this deduction since the beginning of the fiscal year unit now.",
            "example": "100.21"
          }
        },
        "required": ["amount", "description", "ytdAmount"]
      },
      "WorkerPaymentRecordEmployerDetails": {
        "type": "object",
        "description": "This information will appear on the worker's payment record to indicate the payment's source.",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/WorkerPaymentRecordAddress"
          },
          "businessName": {
            "type": "string",
            "description": "Legal business name of the employer."
          },
          "employer": {
            "type": "string",
            "description": "Reference to the employer that is paying the worker.",
            "example": "er_781..."
          }
        },
        "required": ["address", "businessName", "employer"]
      },
      "WorkerPaymentRecordPayMethod": {
        "type": "string",
        "description": "The new payment method value.",
        "enum": ["DIRECT_DEPOSIT", "PAPER_CHECK"]
      },
      "WorkerPaymentRecordPayPeriod": {
        "type": "object",
        "description": "Time during which work hours are tracked and subsequently used to calculate the compensation based on the time worked within this period.",
        "properties": {
          "end": {
            "type": "string",
            "format": "date",
            "description": "Date where the interval for the period ends."
          },
          "start": {
            "type": "string",
            "format": "date",
            "description": "Date where the interval for the period starts."
          }
        },
        "required": ["end", "start"]
      },
      "WorkerPaymentRecordPeriodTotals": {
        "type": "object",
        "description": "Total amounts of a WorkerPaymentRecord for a give pay period.",
        "properties": {
          "totalCompensations": {
            "$ref": "#/components/schemas/WorkerPaymentRecordAmount"
          },
          "totalDeductions": {
            "$ref": "#/components/schemas/WorkerPaymentRecordAmount"
          },
          "totalTaxContributions": {
            "$ref": "#/components/schemas/WorkerPaymentRecordAmount"
          },
          "totalTaxDeductions": {
            "$ref": "#/components/schemas/WorkerPaymentRecordAmount"
          }
        },
        "required": [
          "totalCompensations",
          "totalDeductions",
          "totalTaxContributions",
          "totalTaxDeductions"
        ]
      },
      "WorkerPaymentRecordStatus": {
        "type": "string",
        "description": "Indicates the current state of this payment record such as draft - when it has been calculated but the PayrollRun has not been confirmed.",
        "enum": ["DRAFT", "CONFIRMED"]
      },
      "WorkerPaymentRecordTaxContribution": {
        "type": "object",
        "description": "Accumulated amount for a contribution in the WorkerPaymentRecord.",
        "properties": {
          "amount": {
            "type": "string",
            "format": "money",
            "description": "The amount of the contribution.",
            "example": "100.21"
          },
          "description": {
            "type": "string",
            "description": "The description of the contribution."
          },
          "ytdAmount": {
            "type": "string",
            "format": "money",
            "description": "The accumulated amount of this contribution since the beginning of the fiscal year unit now.",
            "example": "100.21"
          }
        },
        "required": ["amount", "description", "ytdAmount"]
      },
      "WorkerPaymentRecordTaxDeduction": {
        "type": "object",
        "description": "Accumulated amount for a tax in the WorkerPaymentRecord.",
        "properties": {
          "amount": {
            "type": "string",
            "format": "money",
            "description": "The amount of the tax.",
            "example": "100.21"
          },
          "description": {
            "type": "string",
            "description": "The description of the tax."
          },
          "ytdAmount": {
            "type": "string",
            "format": "money",
            "description": "The accumulated amount of this tax since the beginning of the fiscal year unit now.",
            "example": "100.21"
          }
        },
        "required": ["amount", "description", "ytdAmount"]
      },
      "WorkerPaymentRecordWorkTime": {
        "type": "object",
        "description": "Total accumulated time worked by the worker on this period.",
        "properties": {
          "hours": {
            "type": "string",
            "format": "number",
            "description": "Hours worker by the worker in the defined pay period.",
            "example": "221.21"
          }
        },
        "required": ["hours"]
      },
      "WorkerPaymentRecordWorkerDetails": {
        "type": "object",
        "description": "This information will appear on the worker's payment record to indicate the worker receiving the payment.",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/WorkerPaymentRecordAddress"
          },
          "displayName": {
            "type": "string",
            "description": "Name to refer to the worker. It does not necessarily match with the legal first and last name.",
            "example": "John Doe"
          },
          "firstName": {
            "type": "string",
            "description": "First legal name of the worker.",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last legal name of the worker.",
            "example": "Doe"
          },
          "worker": {
            "type": "string",
            "description": "Reference to the worker that is being paid.",
            "example": "wr_b2b..."
          }
        },
        "required": ["address", "worker"]
      },
      "WorkerPaymentStatusInput": {
        "type": "string",
        "description": "WorkerPayment status",
        "enum": ["PENDING", "CONFIRMED"]
      },
      "WorkerPaymentStatusRestDomain": {
        "type": "string",
        "description": "Indicates in which status this WorkerPayment is on. ",
        "enum": ["EXCLUDED", "PENDING", "CONFIRMED", "PREVIEW"]
      },
      "WorkerPaymentTaxContribution": {
        "type": "object",
        "description": "Taxes that the employer is contributing on behalf of the worker in this PaymentRecord.",
        "properties": {
          "amount": {
            "type": "string",
            "format": "money",
            "description": "Fixed amount for the WorkerPaymentTaxContribution.",
            "example": "100.21"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the WorkerPaymentTaxContribution.",
            "example": "payruncontr_e1cb..."
          },
          "name": {
            "type": "string",
            "description": "Human readable description for the WorkerPaymentTaxContribution."
          },
          "policy": {
            "type": "string",
            "description": "Id of the policy to which this WorkerPaymentTaxContribution is attached."
          }
        },
        "required": ["amount", "id", "name", "policy"]
      },
      "WorkerPaymentTaxDeduction": {
        "type": "object",
        "description": "Taxes deducted from the worker's gross in this PaymentRecord.",
        "properties": {
          "amount": {
            "type": "string",
            "format": "money",
            "description": "Fixed amount for the WorkerPaymentTaxDeduction.",
            "example": "100.21"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the WorkerPaymentTaxDeduction.",
            "example": "payrunded_eb9..."
          },
          "name": {
            "type": "string",
            "description": "Human readable description for the WorkerPaymentTaxDeduction."
          },
          "policy": {
            "type": "string",
            "description": "Id of the policy to which this WorkerPaymentTaxDeduction is attached."
          }
        },
        "required": ["amount", "id", "name", "policy"]
      },
      "WorkerTermination": {
        "type": "object",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/WorkerTerminationCategory"
          },
          "employerNotes": {
            "type": "string",
            "description": "Custom notes (only visible to admins) about the termination."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for this WorkerTermination."
          },
          "terminationDate": {
            "type": "string",
            "format": "date",
            "description": "The date where the worker gets terminated."
          }
        },
        "required": ["category", "id", "terminationDate"]
      },
      "WorkerTerminationCategory": {
        "type": "string",
        "description": "Specifies the reason for a worker's termination from employment.",
        "enum": ["DECEASED", "VOLUNTARY", "INVOLUNTARY"]
      },
      "WorkerTotals": {
        "type": "object",
        "description": "Accumulated total amounts for this period.",
        "properties": {
          "contribution": {
            "type": "string",
            "format": "money",
            "description": "Amounts allocated by the worker towards retirement plans, insurance policies, or other benefit schemes.",
            "example": "100.21"
          },
          "deduction": {
            "type": "string",
            "format": "money",
            "description": "Amounts subtracted from a worker's gross pay for various purposes, such as taxes, contributions, or insurance.",
            "example": "100.21"
          },
          "grossPay": {
            "type": "string",
            "format": "money",
            "description": "Represents the total compensation received by the worker before any deductions, such as taxes and benefits, are subtracted.",
            "example": "100.21"
          },
          "netPay": {
            "type": "string",
            "format": "money",
            "description": "Represents the amount of money the worker receives after all deductions, such as taxes and benefits, have been subtracted from their gross pay.",
            "example": "100.21"
          },
          "payrollCost": {
            "type": "string",
            "format": "money",
            "description": "Represents the monetary expense of this PayrollRun for the employer.",
            "example": "100.21"
          }
        },
        "required": [
          "contribution",
          "deduction",
          "grossPay",
          "netPay",
          "payrollCost"
        ]
      },
      "WorkerUpdatedEvent": {
        "type": "object",
        "description": "Triggers `Worker.updated` when a Worker is updated.",
        "properties": {
          "employerId": {
            "type": "string",
            "description": "The unique identifier for the Employer of the Worker."
          },
          "externalId": {
            "type": "string",
            "description": "The Id used to represent the object in your system that is mapped to this Employer."
          },
          "workerId": {
            "type": "string",
            "description": "The unique identifier for the Worker that was updated."
          }
        },
        "required": ["employerId", "workerId"],
        "title": "Worker updated event"
      },
      "WorkerWorkLocation": {
        "type": "object",
        "description": "The work location that the worker has been assigned to.",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/WorkerWorkLocationAddress"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the work location."
          }
        },
        "required": ["address", "id"]
      },
      "WorkerWorkLocationAddress": {
        "type": "object",
        "description": "Address that is used as this work location",
        "properties": {
          "addressLine1": {
            "type": "string",
            "description": "The first line of the address."
          },
          "addressLine2": {
            "type": "string",
            "description": "The second line of the address."
          },
          "administrativeArea": {
            "type": "string",
            "description": "Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture."
          },
          "country": {
            "$ref": "#/components/schemas/SupportedCountry"
          },
          "locality": {
            "type": "string",
            "description": "Generally refers to the city/town portion of the address. e.g in the US it would be City, in the UK Town"
          },
          "name": {
            "type": "string",
            "description": "Name assigned to this address."
          },
          "postalCode": {
            "type": "string",
            "description": "Code assigned to geographical areas and used to sort mail. e.g in the US this would be the zip code of the address. Supports both ZIP and ZIP+4."
          }
        },
        "required": [
          "addressLine1",
          "administrativeArea",
          "country",
          "locality",
          "postalCode"
        ]
      },
      "WorkerWorkLocationAssignment": {
        "type": "object",
        "description": "Represents an assignment between a worker and a work location.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for a work location assignment."
          },
          "isDefault": {
            "type": "boolean",
            "description": "The default work location is the primary place of work where this worker spends most of their time."
          },
          "workLocation": {
            "$ref": "#/components/schemas/WorkerWorkLocation"
          }
        },
        "required": ["id", "isDefault", "workLocation"]
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  }
}
